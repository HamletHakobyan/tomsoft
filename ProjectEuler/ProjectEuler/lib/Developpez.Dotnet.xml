<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Developpez.Dotnet</name>
    </assembly>
    <members>
        <member name="T:Developpez.Dotnet.Configuration.IniFile">
            <summary>
            Représente un fichier de configuration de type INI
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor">
            <summary>
            Crée une instance vide de IniFile, pour créer dynamiquement
            le contenu du fichier avant de l'enregistrer.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.Boolean)">
            <summary>
            Crée une instance vide de IniFile, pour créer dynamiquement
            le contenu du fichier avant de l'enregistrer.
            <param name="caseSensitive">Indique si le IniFile doit tenir compte de la casse</param>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.String)">
            <summary>
            Crée une instance de IniFile en chargeant le fichier spécifié
            </summary>
            <param name="fileName">Nom du fichier INI à ouvrir</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.String,System.Boolean)">
            <summary>
            Crée une instance de IniFile en chargeant le fichier spécifié
            </summary>
            <param name="fileName">Nom du fichier INI à ouvrir</param>
            <param name="caseSensitive">Indique si le IniFile doit tenir compte de la casse</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.Reload">
            <summary>
            Charge ou recharge le fichier indiqué par la propriété FileName
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.AddSection(System.String)">
            <summary>
            Ajoute une section au fichier INI
            </summary>
            <param name="name">Nom de la section à ajouter</param>
            <returns>La section créée, sous form d'un dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.GetValue(System.String,System.String,System.String)">
            <summary>
            Obtient la valeur de la propriété spécifiée dans la section spécifiée
            Si la propriété n'est pas dans une section, passer une chaine vide
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <param name="defaultValue">Valeur par défaut si la propriété n'existe pas</param>
            <returns>a valeur de la propriété demandée, ou defaultValue si la
            propriété n'existe pas dans le fichier</returns>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.GetValue(System.String,System.String)">
            <summary>
            Obtient la valeur de la propriété spécifiée dans la section spécifiée
            Si la propriété n'est pas dans une section, passer une chaine vide
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <returns>a valeur de la propriété demandée, ou null si la
            propriété n'existe pas dans le fichier</returns>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.SetValue(System.String,System.String,System.String)">
            <summary>
            Définit la valeur d'une propriété dans une section donnée.
            Pour n'indiquer aucune section, passer une chaine vide.
            Si la section n'existe pas, elle est créée
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <param name="value">Valeur de la propriété</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.Save">
            <summary>
            Enregistre le fichier INI sous le chemin indiqué par la propriété FileName
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Configuration.IniFile.FileName">
            <summary>
            Le nom du fichier
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Configuration.IniFile.Sections">
            <summary>
            Sections du fichier INI, accessibles sous forme d'un dictionnaire de sections
            Chaque section est elle-même un dictionnaire de propriétés
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Configuration.IniFile.Item(System.String,System.String)">
            <summary>
            Renvoie la valeur de la propriété spécifiée dans la section spécifiée
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <returns>La valeur de la propriété demandée, ou null si la
            propriété n'existe pas dans le fichier</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.DictionaryBase`2">
            <summary>
            Classe de base pour implémenter des dictionnaires personnalisés, sans avoir à implémenter
            chaque méthode de IDictionary&lt;K, V&gt;. Toutes les méthodes et propriétés sont virtuelles,
            et délèguent leur implémentation à un IDictionary&lt;K, V&gt; passé en paramètre du constructeur
            protégé.
            </summary>
            <typeparam name="K">Type de la clé</typeparam>
            <typeparam name="V">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de DictionaryBase&lt;TKey, TValue&gt; qui délègue son implémentation
            au dictionaire passé en paramètre
            </summary>
            <param name="dictionary">Le dictionnaire auquel déléguer l'implémentation</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Add(`0,`1)">
            <summary>
            Ajoute la clé et la valeur spécifiées au dictionnaire. 
            </summary>
            <param name="key">Clé de l'élément à ajouter. </param>
            <param name="value">Valeur de l'élément à ajouter. La valeur peut être nullNothingnullptrune référence null pour les types référence.</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.ContainsKey(`0)">
            <summary>
            Détermine si le dictionnaire contient la clé spécifiée. 
            </summary>
            <param name="key">Clé à rechercher</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Remove(`0)">
            <summary>
            Supprime du dictionnaire la valeur ayant la clé spécifiée. 
            </summary>
            <param name="key">Clé de l'élément à supprimer.</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. 
            </summary>
            <param name="key">Clé de la valeur à obtenir.</param>
            <param name="value">Paramètre de sortie auquel est affecté la valeur trouvée</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Ajoute la paire clé/valeur spécifiée au dictionnaire 
            </summary>
            <param name="item">Paire clé/valeur à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Clear">
            <summary>
            Supprime toutes les clés et les valeurs du dictionnaire
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Détermine si le dictionnaire contient la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur recherchée</param>
            <returns>true si le dictionnaire contient la paire clé/valeur, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copie les éléments du dictionnaire dans un tableau, à partir de la position spécifiée
            </summary>
            <param name="array">Tableau de destination</param>
            <param name="arrayIndex">Index du tableau où commencer la copie</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Supprime du dictionnaire la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt le dictionnaire
            </summary>
            <returns>Un énumerateur pour parcourir le dictionnaire</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Keys">
            <summary>
            Obtient une collection contenant les clés du dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Values">
            <summary>
            Obtient une collection contenant les valeurs du dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Item(`0)">
            <summary>
            Obtient ou définit la valeur associée à la clé spécifiée.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Count">
            <summary>
            Obtient le nombre de paires clé/valeur contenues dans le dictionnaire
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.IsReadOnly">
            <summary>
            Obtient une valeur indiquant si le dictionnaire est en lecture seule
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions">
            <summary>
            Fournit des méthodes d'extension pour faciliter la sérialization XML
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ToXml``1(``0)">
            <summary>
            Renvoie une chaine de caractères contenant la représentation XML
            de l'objet
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <returns>La représentation XML de l'objet</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ToXml``1(``0,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Renvoie une chaine de caractères contenant la représentation XML
            de l'objet, en précisant les namespaces XML à utiliser
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
            <returns>La représentation XML de l'objet</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ParseXml``1(System.String)">
            <summary>
            Crée un objet à partir de sa représentation XML
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="xml">Représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.String)">
            <summary>
            Sérialise un objet en XML dans le fichier spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="path">Chemin du fichier</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.String,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le fichier spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="path">Chemin du fichier</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.Stream)">
            <summary>
            Sérialise un objet en XML dans le flux spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="stream">Flux dans lequel sérialiser l'objet</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.Stream,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le flux spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="stream">Flux dans lequel sérialiser l'objet</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.TextWriter)">
            <summary>
            Sérialise un objet en XML dans le TextWriter spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">TextWriter dans lequel sérialiser l'objet</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.TextWriter,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le TextWriter spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">TextWriter dans lequel sérialiser l'objet</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.Xml.XmlWriter)">
            <summary>
            Sérialise un objet en XML dans le XmlWriter spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">XmlWriter dans lequel sérialiser l'objet</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.Xml.XmlWriter,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le XmlWriter spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">XmlWriter dans lequel sérialiser l'objet</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.String)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le fichier spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="path">Chemin du fichier</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.IO.Stream)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le flux spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="stream">Flux contenant la représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.IO.TextReader)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le TextReader spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="reader">TextReader contenant la représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le XmlReader spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="reader">XmlReader contenant la représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le XmlReader spécifié, en utilisant
            les évènements de désérialisation spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="reader">XmlReader contenant la représentation XML de l'objet</param>
            <param name="events">Evènements de désérialisation à utiliser</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.AsXmlSerializable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Renvoie un objet sérialisable en XML representant les données d'un dictionnaire
            </summary>
            <typeparam name="TKey">Type de clé</typeparam>
            <typeparam name="TValue">Type de valeur</typeparam>
            <param name="dictionary">Dictionnaire à sérialiser</param>
            <returns>Une collection de paires clé/valeur, équivalente au dictionnaire et sérialisable en XML</returns>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.Singleton`1">
            <summary>
            Implémente un singleton avec intialisation tardive pour le type spécifié.
            </summary>
            <typeparam name="T">Type de l'objet pour lequel le singleton est implémenté</typeparam>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.Singleton`1.Instance">
            <summary>
            Retourne l'instance unique du type T
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.DisposablePointer">
            <summary>
            Représente un pointeur non managé qui implémente IDisposable pour libérer la ressource.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.#ctor(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            Initialise une nouvelle instance de DisposablePointer, avec la valeur spécifiée et
            l'action spécifiée pour libérer le pointeur.
            </summary>
            <param name="value">Valeur initiale du pointeur</param>
            <param name="disposeAction">Action à exécuter pour libérer le pointeur</param>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.Dispose">
            <summary>
            Libère la ressource représentée par le pointeur, en appelant l'action spécifiée
            en paramètre du constructeur
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.Finalize">
            <summary>
            Destructeur
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.Dispose(System.Boolean)">
            <summary>
            Libère la ressource représentée par le pointeur, en appelant l'action spécifiée
            en paramètre du constructeur
            <param name="disposing">Inutilisé</param>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.AllocHGlobal(System.Int32)">
            <summary>
            Alloue la quantité spécifiée de mémoire non managée, et renvoie le pointeur obtenu
            sous forme d'un DisposablePointer.
            </summary>
            <param name="size">Quantité de mémoire à allouer</param>
            <returns>Un DisposablePointer représentant la zone mémoire allouée</returns>
        </member>
        <member name="P:Developpez.Dotnet.DisposablePointer.Value">
            <summary>
            Renvoie la valeur du pointeur
            </summary>
            <exception cref="T:System.ObjectDisposedException">L'objet a été disposé et le pointeur libéré</exception>
        </member>
        <member name="T:Developpez.Dotnet.FuncExtensions">
            <summary>
            Fournit des méthodes d'extension pour les fonctions et actions
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``3(System.Func{``0,``1,``2})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque ensemble de valeurs des arguments, de façon à n'appeler la fonction
            qu'une seule fois pour chaque ensemble de valeurs des arguments
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>Une version de la fonction qui met en cache ses résultats</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque ensemble de valeurs des arguments, de façon à n'appeler la fonction
            qu'une seule fois pour chaque ensemble de valeurs des arguments
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>Une version de la fonction qui met en cache ses résultats</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque ensemble de valeurs des arguments, de façon à n'appeler la fonction
            qu'une seule fois pour chaque ensemble de valeurs des arguments
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>Une version de la fonction qui met en cache ses résultats</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``3(System.Func{``0,``1,``2})">
            <summary>
            Renvoie une version curryfiée de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à curryfier</param>
            <returns>une version curryfiée de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``2(System.Action{``0,``1})">
            <summary>
            Renvoie une version curryfiée de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <param name="action">L'action à curryfier</param>
            <returns>une version curryfiée de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Renvoie une version curryfiée de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à curryfier</param>
            <returns>une version curryfiée de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``3(System.Action{``0,``1,``2})">
            <summary>
            Renvoie une version curryfiée de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <param name="action">L'action à curryfier</param>
            <returns>une version curryfiée de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Renvoie une version curryfiée de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à curryfier</param>
            <returns>une version curryfiée de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Renvoie une version curryfiée de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="action">L'action à curryfier</param>
            <returns>une version curryfiée de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``1(System.Func{``0})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat,
            de façon à n'appeler la fonction qu'une seule fois
            </summary>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>La valeur de retour de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``2(System.Func{``0,``1})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque valeur de l'argument, de façon à n'appeler la fonction
            qu'une seule fois pour chaque valeur d'argument
            </summary>
            <typeparam name="T">Le type du paramètre</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>La valeur de retour de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToPredicate``1(System.Func{``0,System.Boolean})">
            <summary>
            Convertit un délégué <![CDATA[Func<T, bool>]]> en délégué <![CDATA[Predicate<T>]]>
            </summary>
            <typeparam name="T">Le type du paramètre</typeparam>
            <param name="function">La fonction à convertir</param>
            <returns>Un prédicat équivalent à la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToFunc``1(System.Predicate{``0})">
            <summary>
            Convertit un délégué <![CDATA[Predicate<T>]]> en délégué <![CDATA[Func<T, bool>]]>
            </summary>
            <typeparam name="T">Le type du paramètre</typeparam>
            <param name="predicate">Le prédicat à convertir</param>
            <returns>Une fonction équivalente au prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Negate``1(System.Func{``0,System.Boolean})">
            <summary>
            Renvoie la négation d'un prédicat
            </summary>
            <typeparam name="T">Le type de paramètre du prédicat</typeparam>
            <param name="function">Le prédicat dont on veut obtenir la négation</param>
            <returns>La négation du prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Negate``1(System.Predicate{``0})">
            <summary>
            Renvoie la négation d'un prédicat
            </summary>
            <typeparam name="T">Le type de paramètre du prédicat</typeparam>
            <param name="predicate">Le prédicat dont on veut obtenir la négation</param>
            <returns>La négation du prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToComparison``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Convertit un délégué <![CDATA[Func<T, T, int>]]> en délégué <![CDATA[Comparison<T>]]>
            </summary>
            <typeparam name="T">Le type des paramètres</typeparam>
            <param name="function">La fonction à convertir</param>
            <returns>Une comparaison équivalente à la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToFunc``1(System.Comparison{``0})">
            <summary>
            Convertit un délégué <![CDATA[Comparison<T>]]> en délégué <![CDATA[Func<T, T, int>]]>
            </summary>
            <typeparam name="T">Le type des paramètres</typeparam>
            <param name="comparison">La comparaison à convertir</param>
            <returns>Une fonction équivalente à la comparaison</returns>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadUtils">
            <summary>
            Utilitaires d'exécutions de méthodes via différents threads
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteBackground(System.Threading.ThreadStart)">
            <summary>
            Exécute le délégué spécifié en arrière plan dans un nouveau thread
            </summary>
            <param name="method">Délégué à exécuter en arrière plan</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteBackground(System.Threading.ThreadStart,System.String)">
            <summary>
            Exécute le délégué spécifié en arrière plan dans un nouveau thread
            </summary>
            <param name="method">Délégué à exécuter en arrière plan</param>
            <param name="description">Description du thread crée</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.Execute(System.Threading.ThreadStart,System.TimeSpan)">
            <summary>
            Exécute une méthode avec un temps maximal d'exécution. Si le temps d'exécution est dépassé
            et que le délégué ne s'est toujours pas terminé, le travail est arrêté via Thread.Abort
            et une exception TimeoutException est levée
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="timeout">Temps maximal d'exécution du délégué</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.Execute(System.Threading.ThreadStart,System.String,System.TimeSpan)">
            <summary>
            Exécute une méthode avec un temps maximal d'exécution. Si le temps d'exécution est dépassé
            et que le délégué ne s'est toujours pas terminé, le travail est arrêté via Thread.Abort
            et une exception TimeoutException est levée
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="description">Description du thread crée (si un thread est crée)</param>
            <param name="timeout">Temps maximal d'exécution du délégué</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart,System.String)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="description">Si un thread est crée, description de celui ci</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart,System.EventHandler)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="onFinish">Evènement à appeler lorsque l'opération est terminée</param>
            <remarks>
            onFinish peut être null cependant si onFinish est différent de null il est exécuté
            sur le thread ayant exécuté le travail, pas sur le thread appelant
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart,System.String,System.EventHandler)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="description">Description du thread crée (si un thread est crée)</param>
            <param name="onFinish">Evènement à appeler lorsque l'opération est terminée</param>
            <remarks>
            onFinish peut être null cependant si onFinish est différent de null il est exécuté
            sur le thread ayant exécuté le travail, pas sur le thread appelant
            </remarks>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadUtils.UseThreadPool">
            <summary>
            Indique si par défaut le ThreadPool doit être utilisé à la place
            de créer un nouveau thread pour les opérations compatibles
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.WeakReference`1">
            <summary>
            Représente une référence faible fortement typée
            </summary>
            <typeparam name="T">Type de l'objet référencé</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.WeakReference`1.#ctor(`0)">
            <summary>
            Initialise une nouvelle instance de WeakReference&lt;T&gt; qui
            référence l'objet cible spécifié
            </summary>
            <param name="target">Objet cible</param>
        </member>
        <member name="M:Developpez.Dotnet.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initialise une nouvelle instance de WeakReference&lt;T&gt; qui
            référence l'objet cible spécifié, en indiquant si l'objet doit
            continuer à être suivi après sa finalisation
            </summary>
            <param name="target">Objet cible</param>
            <param name="trackResurrection">true si l'objet doit être suivi
            après sa finalisation (référence faible "longue"), false sinon
            (référence faible "courte")</param>
        </member>
        <member name="M:Developpez.Dotnet.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialise une nouvelle instance de WeakReference&lt;T&gt; en utilisant
            les données désérialisées
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Developpez.Dotnet.WeakReference`1.Target">
            <summary>
            Renvoie l'objet cible de la référence faible
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.StringExtensions">
            <summary>
            Fournit des méthodes d'extension pour les chaines de caractères
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indique si une chaine est nulle ou vide
            </summary>
            <param name="s">la chaine à tester</param>
            <returns>true si la chaine est nulle ou vide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formate la chaine avec les valeurs spécifiées, de la même façon que
            String.Format
            </summary>
            <param name="format">La chaine de format</param>
            <param name="args">les valeurs à utiliser</param>
            <returns>La chaine formatée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Reverse(System.String)">
            <summary>
            Inverse l'ordre des caractères d'une chaine
            </summary>
            <param name="s">La chaine à inverser</param>
            <returns>La chaine inversée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatène toutes les chaines de la liste en plaçant le séparateur
            spécifié entre chaque chaine
            </summary>
            <param name="list">La liste de chaines à concaténer</param>
            <param name="separator">Le séparateur à utiliser</param>
            <returns>La concaténation des chaines de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetLines(System.String)">
            <summary>
            Renvoie toutes les lignes d'une chaine de caractères
            </summary>
            <param name="s">La chaine à découper en lignes</param>
            <returns>La liste des lignes de cette chaine</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetMD5Digest(System.String)">
            <summary>
            Renvoie le hash MD5 de la chaîne sous forme d'une chaine hexadécimale, en
            se basant sur l'encodage ASCII
            </summary>
            <param name="s">la chaine dont on veut obtenir le hash MD5</param>
            <returns>le hash MD5 sous forme d'une chaine hexadécimale</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetMD5Digest(System.String,System.Text.Encoding)">
            <summary>
            Renvoie le hash MD5 de la chaîne sous forme d'une chaine hexadécimale, en
            se basant sur l'encodage spécifié
            </summary>
            <param name="s">la chaine dont on veut obtenir le hash MD5</param>
            <param name="encoding">L'encodage à utiliser</param>
            <returns>le hash MD5 sous forme d'une chaine hexadécimale</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Enlève les caractères diacritiques (accents, cédilles...) d'une chaine en les remplaçant par le
            caractère de base.
            </summary>
            <param name="s">La chaine dont on veut enlever les diacritiques</param>
            <returns>La chaine sans les diacritiques</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Retourne une chaîne contenant un nombre spécifié de caractères en partant de la gauche d'une chaîne.
            </summary>
            <param name="s">chaine dont les caractères situés le plus à gauche sont retournés</param>
            <param name="count">Nombre de caractères à retourner</param>
            <returns>une chaîne contenant le nombre spécifié de caractères en partant de la gauche de s</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Retourne une chaîne contenant un nombre spécifié de caractères en partant de la droite d'une chaîne.
            </summary>
            <param name="s">chaine dont les caractères situés le plus à droite sont retournés</param>
            <param name="count">Nombre de caractères à retourner</param>
            <returns>une chaîne contenant le nombre spécifié de caractères en partant de la droite de s</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetCharFrequencies(System.String)">
            <summary>
            Renvoie un dictionnaire contenant le nombre d'occurences de chaque caractère de la chaine
            </summary>
            <param name="s">La chaine pour laquelle on veut compter les caractères</param>
            <returns>Un dictionnaire contenant le nombre d'occurences de chaque caractère</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.From(System.String,System.Int32)">
            <summary>
            Renvoie une portion de chaine à partir de la position spécifiée
            </summary>
            <param name="s">Chaine dont on veut extraire une portion</param>
            <param name="start">Position de début de la portion</param>
            <returns>La portion de chaine demandée </returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.To(Developpez.Dotnet.StringExtensions.SubStringFrom,System.Int32)">
            <summary>
            Termine une portion de chaine à la position spécifiée
            </summary>
            <param name="subStringFrom">Portion de chaine à terminer</param>
            <param name="end">Position de fin</param>
            <returns>La portion de chaine demandée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.From(System.String,System.String)">
            <summary>
            Renvoie une portion de chaine à partir de la sous-chaine spécifiée, sans inclure cette dernière
            </summary>
            <param name="s">Chaine dont on veut extraire une portion</param>
            <param name="start">Sous-chaine de début de la portion</param>
            <returns>La portion de chaine demandée </returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.From(System.String,System.String,System.Boolean)">
            <summary>
            Renvoie une portion de chaine à partir de la sous-chaine spécifiée, en incluant éventuellement cette dernière
            </summary>
            <param name="s">Chaine dont on veut extraire une portion</param>
            <param name="start">Sous-chaine de début de la portion</param>
            <param name="includeBoundary">true pour inclure la chaine de début spécifiée dans le résultat, false sinon</param>
            <returns>La portion de chaine demandée </returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.To(Developpez.Dotnet.StringExtensions.SubStringFrom,System.String)">
            <summary>
            Termine une portion de chaine à la sous-chaine spécifiée, sans inclure cette dernière
            </summary>
            <param name="subStringFrom">Portion de chaine à terminer</param>
            <param name="end">Sous-chaine de fin</param>
            <returns>La portion de chaine demandée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.To(Developpez.Dotnet.StringExtensions.SubStringFrom,System.String,System.Boolean)">
            <summary>
            Termine une portion de chaine à la sous-chaine spécifiée, en incluant éventuellement cette dernière
            </summary>
            <param name="subStringFrom">Portion de chaine à terminer</param>
            <param name="end">Sous-chaine de fin</param>
            <param name="includeBoundary">true pour inclure la chaine de fin spécifiée, false sinon</param>
            <returns>La portion de chaine demandée</returns>
        </member>
        <member name="T:Developpez.Dotnet.StringExtensions.SubStringFrom">
            <summary>
            Représente une portion d'une chaine de caractères à partir d'une position donnée
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.SubStringFrom.op_Implicit(Developpez.Dotnet.StringExtensions.SubStringFrom)~System.String">
            <summary>
            Convertit implicitement un SubStringForm en String
            </summary>
            <param name="subStringFrom">SubStringForm à convertir</param>
            <returns>La chaine correspondante</returns>
        </member>
        <member name="P:Developpez.Dotnet.StringExtensions.SubStringFrom.String">
            <summary>
            La chaine dont cet objet représente une portion
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.StringExtensions.SubStringFrom.Start">
            <summary>
            La position de départ de la portion de chaine
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.EnumExtensions">
            <summary>
            Fournit des méthodes d'extension pour manipuler les énumérations
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.CheckIsEnum``1(System.Boolean)">
            <summary>
            Vérifie que le type spécifié est une énumération, et optionnellement s'il a l'attribut 'Flags'.
            Si ce n'est pas le cas, une exception est levée.
            </summary>
            <param name="withFlags">indique si le type à vérifier doit porter l'attribut Flags</param>
            <typeparam name="T">Le type à vérifier</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.HasFlag``1(``0,``0)">
            <summary>
            Vérifie si le flag spécifié est présent dans la valeur
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à vérifier</param>
            <param name="flag">Le flag à vérifier</param>
            <returns>true si le flag est présent, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.GetFlags``1(``0)">
            <summary>
            Convertit une combinaison de flags en une liste de valeurs de l'énumération
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à convertir</param>
            <returns>La liste des flags présents dans la combinaison</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.SetFlags``1(``0,``0,System.Boolean)">
            <summary>
            Définit la valeur d'un ou des flags dans une combinaison de flags
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à modifier</param>
            <param name="flags">Le ou les flags à définir</param>
            <param name="on">true pour ajouter le flag, false pour l'enlever</param>
            <returns>La combinaison résultant de l'ajout ou de la suppression des flags</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.SetFlags``1(``0,``0)">
            <summary>
            Ajoute un ou des flags à une combinaison
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à modifier</param>
            <param name="flags">Le ou les flags à ajouter</param>
            <returns>La combinaison résultant de l'ajout des flags</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ClearFlags``1(``0,``0)">
            <summary>
            Supprime un ou des flags d'une combinaison
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à modifier</param>
            <param name="flags">Le ou les flags à supprimer</param>
            <returns>La combinaison résultant de la suppression des flags</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.CombineFlags``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convertit une liste de flags en une combinaison de ces flags
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="flags">La liste de flags à combiner</param>
            <returns>La combinaison des flags de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.GetDescription``1(``0)">
            <summary>
            Renvoie, si elle est définie, la description d'une valeur d'une énumération, spécifiée par
            l'attribut DescriptionAttribute. Si la description n'est pas définie, renvoie null.
            </summary>
            <param name="value">la valeur pour laquelle obtenir une description</param>
            <returns>La description de la valeur si elle est définie, null sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Convertit une chaine en une valeur d'énumération, en ignorant éventuellement la casse
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="stringValue">Chaine à convertir</param>
            <param name="ignoreCase">true pour ignorer la casse, false sinon</param>
            <returns>La valeur d'énumération correspondant à la chaine</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.String)">
            <summary>
            Convertit une chaine en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="stringValue">Chaine à convertir</param>
            <returns>La valeur d'énumération correspondant à la chaine</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.SByte)">
            <summary>
            Convertit un entier signé sur 8 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Int16)">
            <summary>
            Convertit un entier signé sur 16 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Int32)">
            <summary>
            Convertit un entier signé sur 32 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Int64)">
            <summary>
            Convertit un entier signé sur 64 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Byte)">
            <summary>
            Convertit un entier non signé sur 8 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.UInt16)">
            <summary>
            Convertit un entier non signé sur 16 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.UInt32)">
            <summary>
            Convertit un entier non signé sur 32 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.UInt64)">
            <summary>
            Convertit un entier non signé sur 64 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="T:Developpez.Dotnet.EnumExtensions.EnumInfoCache`1">
            <summary>
            Cette classe permet de mettre en cache les informations d'un type
            d'énumération en particulier. Les informations ne sont évaluées
            qu'une fois par type, dans le constructeur statique
            </summary>
            <typeparam name="T">Le type d'énumération</typeparam>
        </member>
        <member name="T:Developpez.Dotnet.Language.Grammar.Gender">
            <summary>
            Genre grammatical.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Gender.Masculine">
            <summary>
            Masculin.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Gender.Feminine">
            <summary>
            Féminin.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Language.Grammar.Number">
            <summary>
            Nombre grammatical.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Number.Singular">
            <summary>
            Singulier.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Number.Plural">
            <summary>
            Pluriel.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Language.Grammar.NumeralAdjective">
            <summary>
            Adjectif numéral.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.NumeralAdjective.Cardinal">
            <summary>
            Adjectif numéral cardinal.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.NumeralAdjective.Ordinal">
            <summary>
            Adjectif numéral ordinal.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.CoreExtensions">
            <summary>
            Fournit des méthodes d'extensions à usage générique
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Default``1(``0,``0)">
            <summary>
            Renvoie la valeur courante si elle est non nulle. Sinon, renvoie la valeur par défaut spécifiée.
            Equivalent à l'opérateur C# <c>??</c>
            </summary>
            <typeparam name="T">Type de la valeur courante</typeparam>
            <param name="obj">Valeur courante</param>
            <param name="defaultValue">Valeur par défaut à renvoyer si la valeur courante est nulle</param>
            <returns>La valeur courante si elle est non nulle. Sinon, la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.IfNotNull``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Si la valeur courante n'est pas nulle, renvoie la valeur spécifiée par le sélecteur. Sinon,
            renvoie la valeur par défaut spécifiée.
            </summary>
            <typeparam name="T">Type de la valeur courante</typeparam>
            <typeparam name="TResult">Type de retour du sélecteur</typeparam>
            <param name="obj">Valeur courante</param>
            <param name="selector">Sélecteur indiquant la valeur à renvoyer</param>
            <param name="valueIfNull">Valeur par défaut à renvoyer si la valeur courante est nulle</param>
            <returns>Si la valeur courante n'est pas nulle, la valeur spécifiée par le sélecteur. Sinon, la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.IfNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            Si la valeur courante n'est pas nulle, renvoie la valeur spécifiée par le sélecteur. Sinon,
            renvoie la valeur par défaut du type de retour spécifié.
            </summary>
            <typeparam name="T">Type de la valeur courante</typeparam>
            <typeparam name="TResult">Type de retour du sélecteur</typeparam>
            <param name="obj">Valeur courante</param>
            <param name="selector">Sélecteur indiquant la valeur à renvoyer</param>
            <returns>Si la valeur courante n'est pas nulle, la valeur spécifiée par le sélecteur. Sinon, la valeur par défaut du type de retour spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Between``1(``0,``0,``0)">
            <summary>
            Teste si une valeur est entre les 2 valeurs spécifiées (bornes inclues)
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="min">Borne inférieure</param>
            <param name="max">Borne supérieure</param>
            <returns>true si <code>min &lt;= value &lt;= max</code>, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.StrictlyBetween``1(``0,``0,``0)">
            <summary>
            Teste si une valeur est strictement entre les bornes spécifiées (bornes non inclues)
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="min">Borne inférieure</param>
            <param name="max">Borne supérieure</param>
            <returns>true si <code>min &lt; value &lt; max</code>, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.In``1(``0,``0[])">
            <summary>
            Teste si une valeur appartient à la liste spécifiée
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="list">Liste à laquelle la valeur doit appartenir</param>
            <returns>true si la valeur appartient à la liste, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Teste si une valeur appartient à la liste spécifiée
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="list">Liste à laquelle la valeur doit appartenir</param>
            <returns>true si la valeur appartient à la liste, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.ConvertTo``1(System.Object)">
            <summary>
            Convertit un objet vers le type spécifié. Lève une exception si la conversion
            n'est pas possible.
            </summary>
            <typeparam name="T">Type de destination</typeparam>
            <param name="value">Object à convertir</param>
            <returns>La valeur convertie</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SafeEquals(System.Object,System.Object)">
            <summary>
            Teste l'égalité de 2 objets, sans risque de NullReferenceException si l'un des objets
            est null.
            </summary>
            <param name="obj">Premier objet à comparer</param>
            <param name="other">Second objet à comparer</param>
            <returns>true si les objets sont égaux ou tous les 2 null, sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.CheckArgumentNull``1(``0,System.String)">
            <summary>
            Vérifie si un argument est null, et lève une ArgumentNullException le cas échéant
            </summary>
            <typeparam name="T">Type du paramètre</typeparam>
            <param name="value">Valeur du paramètre</param>
            <param name="paramName">Nom du paramètre</param>
        </member>
        <member name="T:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry`2">
            <summary>
            Représente une paire clé/valeur pour la sérialisation XML
            d'un dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry`2.Key">
            <summary>
            Clé de cette paire clé/valeur
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry`2.Value">
            <summary>
            Valeur de cette paire clé/valeur
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Siret">
            <summary>
            Vérification d'un numéro Siret.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Siret.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro SIRET (et de son numéro SIREN associé).
            (Attention : cette méthode valide le numéro SIRET
            selon l'algorithme de Luhn, mais ne vérifie pas
            que le numéro soit attribué ni à quel établissement).
            </summary>
            <param name="siretToCheck">Numéro SIRET.</param>
            <returns>Vrai si le SIRET, et son SIREN associé sont valides, faux sinon.</returns>
            <remarks>Système d’Identification du Répertoire des ETablissements.
            http://fr.wikipedia.org/wiki/SIRET
            </remarks>
        </member>
        <member name="T:Developpez.Dotnet.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.BadInputStringFormat">
            <summary>
              Looks up a localized string similar to Le format de la chaîne d&apos;entrée est incorrect..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.CopyToNotEnoughSpace">
            <summary>
              Looks up a localized string similar to Le nombre d&apos;éléments dans la collection source est plus grand que l&apos;espace disponible entre l&apos;index de départ et la fin du tableau de destination.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.DictionaryIsReadOnly">
            <summary>
              Looks up a localized string similar to Le dictionnaire est en lecture seule.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.IniFileNameNotSet">
            <summary>
              Looks up a localized string similar to Le nom du fichier n&apos;est pas défini.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.InputSequenceHasMoreThanOneElement">
            <summary>
              Looks up a localized string similar to La séquence d&apos;entrée contient plusieurs éléments..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.InvalidCastFromTo">
            <summary>
              Looks up a localized string similar to Cast invalide de &apos;{0}&apos; en &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.InvalidRIBCharacter">
            <summary>
              Looks up a localized string similar to Le caractère à convertir doit être une lettre entre A et Z.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.MaxThreadCountOutOfRange">
            <summary>
              Looks up a localized string similar to Le nombre maximum de thread doit être supérieur ou égal à 1.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.NegativeLifeTime">
            <summary>
              Looks up a localized string similar to La durée de vie doit être strictement positive..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.NoMatchingItemInList">
            <summary>
              Looks up a localized string similar to La liste ne contient aucun élément correspondant..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.NumberNegative">
            <summary>
              Looks up a localized string similar to Le nombre doit être supérieur à zéro..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.OperationTimedOut">
            <summary>
              Looks up a localized string similar to Le temps imparti à l&apos;opération est écoulé..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.RomanMaxValue">
            <summary>
              Looks up a localized string similar to Un chiffre romain ne peut pas être supérieur à {0}..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.RomanMinValue">
            <summary>
              Looks up a localized string similar to Un chiffre romain ne peut pas être inférieur à {0}..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.StringNotANumber">
            <summary>
              Looks up a localized string similar to La chaîne de caractères doit être un nombre..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.StringNullOrEmpty">
            <summary>
              Looks up a localized string similar to La chaîne de caractères ne doit pas être vide..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.StringWrongLength">
            <summary>
              Looks up a localized string similar to La chaîne doit faire {0} caractères de long..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.SubstringCountOutOfRange">
            <summary>
              Looks up a localized string similar to Le nombre de caractères doit être supérieur ou égal à 0 et inférieur ou égal à la longueur de la chaine.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.TimeoutOutOfRange">
            <summary>
              Looks up a localized string similar to Le timeout doit être supérieur ou égal à 1 milliseconde.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.TypeIsNotEnum">
            <summary>
              Looks up a localized string similar to Le type &apos;{0}&apos; n&apos;est pas une énumération.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.TypeNotDecoratedWithFlags">
            <summary>
              Looks up a localized string similar to Le type &apos;{0}&apos; n&apos;a pas l&apos;attribut System.FlagsAttribute.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ExceptionMessages.WrapperClosedOrDisposed">
            <summary>
              Looks up a localized string similar to Le wrapper a été fermé ou disposé.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1">
            <summary>
            Gestionnaire d'un pool d'objet générique
            </summary>
            <typeparam name="T">Type des objets à placer dans le gestionnaire</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.AppendItemToPool(Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0}.GenericPoolItem)">
            <summary>
            Rajoute un objet dans le pool
            </summary>
            <param name="item">Objet à rajouter</param>
            <returns>true si l'opération a réussit, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.AppendItemToPool(System.Collections.Generic.LinkedListNode{Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0}.GenericPoolItem})">
            <summary>
            Rajoute un objet dans le pool
            </summary>
            <param name="item">Objet à rajouter</param>
            <returns>true si l'opération a réussit, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GetItemFromPool">
            <summary>
            Renvoi nul si aucun item n'était présent à ce moment dans le Pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.#ctor(System.Int32,System.Int32,Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0}.CreateNewItemMethod)">
            <summary>
            Crée une nouvel instance du gestionnaire de pool générique
            </summary>
            <param name="basePooledItemCount">Objets alloués au démarrage</param>
            <param name="maxPooledItemCount">Nombre maximum d'objets avant que ceux-ci ne soient relachés</param>
            <param name="newItemAllocator">allocateur</param>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.ObtainItem">
            <summary>
            Obtient un item à partir du pool, ou en crée un nouveau si aucun n'est disponible
            </summary>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.ObtainItem(System.Boolean)">
            <summary>
            Obtient un objet dans le pool
            </summary>
            <param name="canCreateNew">Si le pool est vide et que canCreateNew vaut true, un nouvel
            objet est crée. Sinon, null est renvoyé</param>
            <returns>Objet du pool, ou null si aucun objet n'est disponible et canCreateNew vaut false</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.InternalNewItem">
            <summary>
            Crée un nouvel objet pour le pool
            </summary>
            <returns>Nouvel objet crée</returns>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.Pool">
            <summary>
            Pool d'objets
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.PoolCount">
            <summary>
            Nombre d'objets actuellement présents dans le pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.CanAddItem">
            <summary>
            Indique si l'état actuel du gestionnaire permet d'y rajouter un objet.
            (S'il y a déjà un nombre maximal d'éléments dans le pool, aucun ajout ne sera possible)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.BaseCachedItemCount">
            <summary>
            Nombre d'objets initialement présents dans le pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.MaxCachedItemCount">
            <summary>
            Nombre d'objets maximum dans le pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.NewItemAllocator">
            <summary>
            Function servant à créer de nouveaux objets pour le pool
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem">
            <summary>
            Conteneur contenant l'objet du pool
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.#ctor(`0,Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0})">
            <summary>
            Initialise une nouvelle instance de conteneur
            </summary>
            <param name="newItem">Element à placer</param>
            <param name="parent">Gestionnaire parent</param>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.UnDispose">
            <summary>
            Repasse l'objet d'un état "libéré" à une état "non libéré"
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Finalize">
            <summary>
            Destructeur
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Dispose">
            <summary>
            Passe l'objet à un état "libéré" et le replace dans le pool d'objets
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Node">
            <summary>
            Node utilisée pour rattacher l'objet au pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Value">
            <summary>
            Objet placé dans le Pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Parent">
            <summary>
            Gestionnaire parent
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.CreateNewItemMethod">
            <summary>
            Méthode servant à la création d'un nouvel objet dans le pool
            </summary>
            <returns>Objet crée</returns>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.GenericPool`1">
            <summary>
            Gestionnaire d'un pool d'objet générique. Les objets doivent avoir
            un constructeur sans paramètre.<br/>
            Si aucun constructeur sans paramètre n'est possible, utilisez la classe <see cref="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1"/>
            </summary>
            <typeparam name="T">Type d'objet à gérer</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.GenericPool`1.#ctor">
            <summary>
            Crée une nouvel instance du gestionnaire de pool générique.<br/>
            Par défaut 1 objet est présent dans le pool et 10 au maximum peuvent être gérés
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.GenericPool`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Crée une nouvel instance du gestionnaire de pool générique
            </summary>
            <param name="startObjectCount">Objets alloués au démarrage</param>
            <param name="maxObjectCount">Nombre maximum d'objets avant que ceux-ci ne soient relachés</param>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.LuhnCheckType">
            <summary>
            Type de vérification par l'algorithme de Luhn.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.None">
            <summary>
            Aucun.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.CreditCard">
            <summary>
            Carte de crédit.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.Siren">
            <summary>
            Siren.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.Siret">
            <summary>
            Siret.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Luhn">
            <summary>
            Algorithme de Luhn.
            </summary>
            <remarks>L'algorithme de Luhn est décrit ici :
            http://en.wikipedia.org/wiki/Luhn_algorithm.
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.Int64)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.String)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.String,System.Int32)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <param name="length">Longueur de la chaîne.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.Int64,Developpez.Dotnet.Algorithms.LuhnCheckType)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <param name="checkType">Type de vérification.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.String,Developpez.Dotnet.Algorithms.LuhnCheckType)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <param name="checkType">Type de vérification.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1">
            <summary>
            Permet d'obtenir le nombre d'exécutions et le temps d'exécutions des méthodes
            d'un objet
            </summary>
            <typeparam name="T">Type de l'objet à surveiller</typeparam>
        </member>
        <member name="F:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.sync">
            <summary>
            Objet de synchronisation
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.#ctor">
            <summary>
            Crée une nouvelle instance du chronomètre d'exécution de méthode
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.transition_sync">
            <summary>
            Objet de synchronisation pour les transitions entre moniteur (proxy) et code (implémentation)
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.MethodBegin(`0,Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs)">
            <summary>
            Début d'appel à une méthode d'un objet
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.MethodExceptionEnd(`0,Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs)">
            <summary>
            Fin d'appel à une méthode d'un objet : cas où une exception est survenue
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.MethodEnd(`0,Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs)">
            <summary>
            Fin d'appel à une méthode d'un objet : cas normal
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.GetAsMonitored(`0)">
            <summary>
            Retourne un objet équivalent à obj, mais dont les appels
            de méthodes seront surveillés
            </summary>
            <param name="obj">objet à surveiller</param>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.GetAsMonitored(`0,System.String[])">
            <summary>
            Retourne un objet équivalent à obj, mais dont les appels
            de méthodes seront surveillés
            </summary>
            <param name="obj">objet à surveiller</param>
            <param name="methodsToMonitor">Nom des méthodes à surveiller, ou null pour tout surveiller</param>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.DiscardMonitoring(`0)">
            <summary>
            Annule toute surveillance de l'objet obj
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.Report">
            <summary>
            Genère un rapport contenant pour chaque objet monitoré, l'ensemble des informations
            d'appel et d'exécution des méthode surveillées
            </summary>
            <returns>Rapport</returns>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.Monitored">
            <summary>
            Ensemble des méthodes actuellement surverillées
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.PerfCounterPool">
            <summary>
            Pool de chronomètres à utiliser pour l'observation des méthodes
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.RunningMethods">
            <summary>
            Méthodes actuellement en cours d'exécution, avec un pool pour le perf counter
            afin d'éviter d'en créer un nombre infini
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry">
            <summary>
            Entrée du rapport d'utilisation d'une méthode
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.#ctor">
            <summary>
            Construit une nouvelle instance d'une entrée du rapport d'appels
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.Clone">
            <summary>
            Crée une copie de l'objet
            </summary>
            <returns>Copie</returns>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.MethodName">
            <summary>
            Nom de la méthode
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.CallCount">
            <summary>
            Nombre d'appels effectués à cette méthode
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.TotalTime">
            <summary>
            Temps total passé dans cette méthode (incluant également les sous-méthodes appelées)
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1">
            <summary>
            Moniteur d'appels à des méthodes d'un objet
            </summary>
            <typeparam name="T">Type de l'objet à surveiller</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Transmet l'appel d'une méthode au proxy sous-jacent
            </summary>
            <param name="invokeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.Create(`0,Developpez.Dotnet.Diagnostics.MethodCallMonitor{`0}@)">
            <summary>
            Crée un nouveau proxy dynamique crée à partir de l'objet target passé en paramètre
            </summary>
            <param name="target"></param>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.OnBeforeMethodCall(Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs)">
            <summary>
            Déclanche l'évènement <see cref="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.BeforeMethodCall"/>
            </summary>
            <param name="e">Paramètre de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.OnAfterMethodCall(Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs)">
            <summary>
            Déclanche l'évènement <see cref="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.AfterMethodCall"/>
            </summary>
            <param name="e">Paramètre de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.OnMethodCallException(Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs)">
            <summary>
            Déclanche l'évènement <see cref="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.MethodCallException"/>
            </summary>
            <param name="e">Paramètre de l'évènement</param>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.ObjUri">
            <summary>
            Uri de l'objet
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.MonitoredMethods">
            <summary>
            Liste des méthodes surveillées. null ou un tableau vide
            signifie de surveiller toutes les méthodes sans exception
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.BeforeMethodCall">
            <summary>
            Appelé avant l'exécution d'une méthode au sein d'un objet surveillé
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.AfterMethodCall">
            <summary>
            Appelé après l'exécution d'une méthode au sein d'un objet surveillé, si l'exécution n'entraine pas d'exception
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.MethodCallException">
            <summary>
            Appelé si une exception survient dans une des méthodes surveillées
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventHandler">
            <summary>
            Représente le délégué utilisé pour un évènement précédent l'appel d'une méthode au sein d'un objet surveillé
            </summary>
            <param name="sender">La source de l'évènement</param>
            <param name="e">Un <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs"/> qui contient les arguments de l'évènement</param>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.AfterMethodCallEventHandler">
            <summary>
            Représente le délégué utilisé pour un évènement suivant l'appel d'une méthode au sein d'un objet surveillé
            </summary>
            <param name="sender">La source de l'évènement</param>
            <param name="e">Un <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs"/> qui contient les arguments de l'évènement</param>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventHandler">
            <summary>
            Représente le délégué utilisé pour un évènement résultant d'une exception dans une des méthodes surveillées
            </summary>
            <param name="sender">La source de l'évènement</param>
            <param name="e">Un <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs"/> qui contient les arguments de l'évènement</param>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallMonitorBaseEventArgs">
            <summary>
            Classe de base pour les évènements de <see cref="T:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1"/>
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitorBaseEventArgs.MethodName">
            <summary>
            Nom de la méthode
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitorBaseEventArgs.Msg">
            <summary>
            Message (remoting) utilisé par le Framework pour tracer l'appel à la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs">
            <summary>
            Classe contenant les informations pour l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventHandler"/>
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs.Exception">
            <summary>
            Exception détectée au sein de la méthode (résultant d'un "throw")
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs.Rethrow">
            <summary>
            Indique si, une fois cet évènement traité, l'exception doit être à nouveau lancée
            pour être interceptée par un niveau supérieur.<br/>
            Par défaut, vaut true (dans le cas d'une non gestion de cet évènement, l'exception est remontée)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs.ReturnMessage">
            <summary>
            Message de retour à passer à l'appelant, contenant la valeur renvoyée par la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs">
            <summary>
            Classe contenant les informations pour l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventHandler"/>
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs.Cancel">
            <summary>
            Indique si l'appel doit être annulé. Dans ce cas, il faut placer un message dans ReturnMessage
            pour assurer l'intégrité des appels (ou déclancher une exception).
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs.ReturnMessage">
            <summary>
            Message de retour à passer à l'appelant, contenant la valeur renvoyée par la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs">
            <summary>
            Classe contenant les informations pour l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.AfterMethodCallEventHandler"/>
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs.Cancelled">
            <summary>
            Indique si l'appel à la méthode a été annulé (résultant de la gestion de l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventHandler"/>)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs.ReturnMessage">
            <summary>
            Message de retour à passer à l'appelant, contenant la valeur renvoyée par la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.CreditCardNumber">
            <summary>
            Vérification d'un numéro de carte bancaire.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.CreditCardNumber.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro de carte bancaire.
            </summary>
            <param name="number">Numéro de carte bancaire.</param>
            <returns>Vrai si le numéro de carte bancaire est valide, faux sinon.</returns>
        </member>
        <member name="T:Developpez.Dotnet.BigMath">
            <summary>
            Cette classe fournit des outils pour effectuer des calculs sur des grands nombres,
            au delà de la limite des 64 bits d'un Int64
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.BigMath.Modulo(System.String,System.UInt64)">
            <summary>
            Calcule le modulo (reste de la division entière) d'un grand nombre par
            un nombre
            </summary>
            <param name="number">Le grand nombre à diviser</param>
            <param name="k">Le diviseur</param>
            <returns>le modulo de la division</returns>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.RIB">
            <summary>
            Vérification d'un numéro RIB
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.RIB.Check(System.String)">
            <summary>
            Vérifie la validité d'un RIB
            </summary>
            <param name="number">Le RIB à vérifier</param>
            <returns>true si le RIB est valide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.RIB.RibLetterToDigit(System.Char)">
            <summary>
            Convertit une lettre d'un RIB en un chiffre selon la table suivante :
            1 2 3 4 5 6 7 8 9
            A B C D E F G H I
            J K L M N O P Q R
            _ S T U V W X Y Z
            </summary>
            <param name="letter">La lettre à convertir</param>
            <returns>Le chiffre de remplacement</returns>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadedWorker`1">
            <summary>
            Classe permettant d'effectuer des actions de manière asynchrone et simultanée sur une série d'objets
            </summary>
            <typeparam name="T">Type des objets à traiter</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.StartWorkers">
            <summary>
            Démarre les threads de travaux
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.StartWorker">
            <summary>
            Initialise un nouveau thread de travaille et l'exécute
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkThreadMethod">
            <summary>
            Méthode appelée par les threads afin d'exécuter les tâches
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.#ctor">
            <summary>
            Initialise une nouvelle instance du gestionnaire de tâches asynchrones
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance du gestionnaire de tâches asynchrones
            </summary>
            <param name="maxThreadCount">Nombre maximum de threads dédiés à créer.<br/>
            Cette valeur ne peut pas être inférieure à 1</param>
        </member>
        <member name="F:Developpez.Dotnet.Threading.ThreadedWorker`1.sync">
            <summary>
            Object de synchronisation
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.ForEach(System.Collections.Generic.IEnumerable{`0},Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod,System.Boolean)">
            <summary>
            Appelle callback pour chaque object de objects de manière asynchrone, callback pouvant 
            être appellé en même temps sur plusieurs threads différents.
            Le nombre maximum de threads est définit par MaxThreadCounts.
            </summary>
            <param name="objects">Objets constituants le travail</param>
            <param name="callback">Méthode à appeller pour le travail</param>
            <param name="wait">Indique si ForEach doit être bloquant jusqu'à la fin de l'exécution
            du travail sur tous les éléments de objects, ou s'il doit retourner immédiatement</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.ExecuteSingleTask(`0,Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod,System.Boolean)">
            <summary>
            Exécute une tâche dans un des threads dédiés
            </summary>
            <param name="obj">Objet constituant le travail</param>
            <param name="callback">Méthode à appeller pour le travail</param>
            <param name="wait">Indique si ExecuteSingleTask doit être bloquant jusqu'à la fin de l'exécution
            du travail sur tous les éléments de objects, ou s'il doit retourner immédiatement</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.ExecuteWork(System.Collections.Generic.IEnumerable{`0},Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod)">
            <summary>
            Exécute le travail
            </summary>
            <param name="objects"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.Release">
            <summary>
            Met fin à tous les travaux et termine tout les thread (à la fin de ce qu'ils ont a faire, éventuellement)
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.Dispose">
            <summary>
            Libère les ressources associées à cette classe et libère les threads utilisés
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.MaxThreadCount">
            <summary>
            Nombre de threads de travail.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.Items">
            <summary>
            Travaux globaux
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadedWorker`1.CallBackMethod">
            <summary>
            Callback appelé pour effectuer les actions sur le type générique des arguments
            </summary>
            <param name="caller">Objet TreadWorker ayant effectué l'appel"/></param>
            <param name="currentObject">Objet de travail actuel</param>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem">
            <summary>
            Tâche à effectuer
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.#ctor(`0,Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod)">
            <summary>
            Initialise une nouvelle instance de tâche à effectuer
            </summary>
            <param name="item">Tâche</param>
            <param name="method">Méthode à appeler</param>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.Item">
            <summary>
            Tâche
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.Method">
            <summary>
            Méthode à appeler
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.Finished">
            <summary>
            Indique si la tâche a été exécutée ou non
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Levenshtein">
            <summary>
            Fournit des méthodes permettant d'évaluer la similarité entre 2 chaînes de caractères,
            selon l'algorithme de la distance de Levenshtein.
            </summary>
            <remarks>L'algorithme de la distance de Levenshtein est décrit ici :
            http://en.wikipedia.org/wiki/Levenshtein_distance.
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Levenshtein.ComputeDistance(System.String,System.String,System.Boolean)">
            <summary>
            Calcule la distance de Levenshtein entre 2 chaînes de caractères.
            </summary>
            <param name="a">Première chaîne à comparer.</param>
            <param name="b">Seconde chaîne à comparer.</param>
            <param name="caseSensitive">true pour tenir compte de la casse, false sinon.</param>
            <returns>La distance de Levenshtein entre les 2 chaînes.</returns>
            <remarks>
            <list type="bullet">
            <item>La distance de Levenshtein est toujours supérieure ou égale à la différence de longueur entre les 2 chaines</item>
            <item>La distance de Levenshtein est toujours inférieure ou égale à la longueur de la plus longue chaine</item>
            <item>La distance de Levenshtein entre 2 chaines identiques est 0</item>
            </list>
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Levenshtein.ComputeCorrelation(System.String,System.String,System.Boolean)">
            <summary>
            Calcule le coefficient de corrélation entre 2 chaînes, sur la base de la distance de Levenshtein
            </summary>
            <param name="a">Première chaîne à comparer</param>
            <param name="b">Seconde chaîne à comparer</param>
            <param name="caseSensitive">true pour tenir compte de la casse, false sinon</param>
            <returns>Le coefficient de corrélation entre les 2 chaînes. Cette valeur est comprise entre 0 (chaînes complètement différentes) et 1 (chaînes identiques)</returns>
            <remarks>Ce coefficient est calculé selon la formule suivante : <c>1 - d/L</c>, où <c>d</c> est la distance de Levenshtein entre les 2 chaînes, et <c>L</c> la longueur de la plus longue chaîne.</remarks>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ReadOnlyDictionary`2">
            <summary>
            Représente un dictionnaire en lecture seule, qui encapsule un autre dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.#ctor">
            <summary>
            Initialise une nouvelle instance de ReadOnlyDictionary&lt;TKey, TValue&gt;.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de ReadOnlyDictionary&lt;TKey, TValue&gt;
            </summary>
            <param name="dictionary">Le dictionnaire à encapsuler</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une InvalidOperationException.
            </summary>
            <param name="key">Clé à ajouter</param>
            <param name="value">Valeur à ajotuer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une InvalidOperationException.
            </summary>
            <param name="key">Clé à supprimer</param>
            <returns>true si l'élément a été supprimé, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Clear">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une InvalidOperationException.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une InvalidOperationException.
            </summary>
            <param name="item">L'élément à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une InvalidOperationException.
            </summary>
            <param name="item">La paire clé/valeur à supprimer</param>
        </member>
        <member name="P:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Obtient la valeur correspondant à la clé spécifiée
            </summary>
            <param name="key">La clé pour laquelle on veut obtenir la valeur</param>
            <returns>La valeur correspondant à la clé</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Obtient une valeur indiquant si le dictionnaire est en lecture seule. Renvoie toujours true.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.SyncList`1">
            <summary>
            Collection syncronisée
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Siren">
            <summary>
            Vérification d'un numéro Siren.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Siren.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro SIREN.
            (Attention : cette méthode valide le numéro SIREN
            selon l'algorithme de Luhn, mais ne vérifie pas
            que le numéro soit attribué, ni à quelle entreprise).
            </summary>
            <param name="sirenToCheck">Numéro SIREN.</param>
            <returns>Vrai si le SIREN est valide, faux sinon.</returns>
            <remarks>Système d’Identification du Répertoire des ENtreprises.
            http://fr.wikipedia.org/wiki/SIREN
            </remarks>
        </member>
        <member name="T:Developpez.Dotnet.Collections.SerializableDictionary`2">
            <summary>
            Dictionnaire générique sérialisable en XML
            Librement adapté de http://weblogs.asp.net/pwelter34/archive/2006/05/03/444961.aspx
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary, avec la capacité initiale spécifiée
            </summary>
            <param name="capacity">Capacité initiale</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec les données copiées du dictionnaire spécifié
            </summary>
            <param name="dictionary">Le dictionnaire à copier</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec le comparateur de clé spécifié
            </summary>
            <param name="comparer">Comparateur de clé à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec la capacité initiale et le
            comparateur de clé spécifiés
            </summary>
            <param name="capacity">Capacité initiale</param>
            <param name="comparer">Comparateur de clé à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec les données copiées du dictionnaire spécifié,
            avec le comparateur de clé spécifié
            </summary>
            <param name="dictionary">Dictionnaire à copier</param>
            <param name="comparer">Comparateur de clé à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary à partir des données désérialisées
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Renvoie le schémar XML de l'objet
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lit les données du dictionnaire à partir du flux XML spécifié
            </summary>
            <param name="reader">Flux XML à désérialiser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Ecrit les données du dictionnaire sur le flux XML spécifié
            </summary>
            <param name="writer">Flux XML vers lequel sérialiser les données</param>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ComparisonComparer`1">
            <summary>
            Comparateur basé sur un delegate Comparison&lt;T&gt;.
            </summary>
            <typeparam name="T">Le type des éléments à comparer</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initialise une nouvelle instance ComparisonComparer&lt;T&gt;.
            </summary>
            <param name="comparison">La comparaison à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Compare deux instances de T
            </summary>
            <param name="x">Premier élément à comparer</param>
            <param name="y">Second élément à comparer</param>
            <returns>-1 si x &lt; y, 1 si x &gt; y, 0 si x == y</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ComparisonComparer`1.op_Implicit(Developpez.Dotnet.Collections.ComparisonComparer{`0})~System.Comparison{`0}">
            <summary>
            Convertit le ComparisonComparer&lt;T&gt; spécifié en Comparison&lt;T&gt;.
            </summary>
            <param name="comparisonComparer">Le ComparisonComparer&lt;T&gt; à convertir</param>
            <returns>La comparaison résultant de la conversion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ComparisonComparer`1.op_Implicit(System.Comparison{`0})~Developpez.Dotnet.Collections.ComparisonComparer{`0}">
            <summary>
            Convertit la Comparison&lt;T&gt; spécifiée en ComparisonComparer&lt;T&gt;.
            </summary>
            <param name="comparison">La Comparison&lt;T&gt; à convertir</param>
            <returns>Le ComparisonComparer&lt;T&gt; résultant de la conversion</returns>
        </member>
        <member name="T:Developpez.Dotnet.IO.StreamExtensions">
            <summary>
            Fournit des méthodes d'extension pour les flux
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.CopyToStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copie le contenu d'un flux vers le flux spécifié
            </summary>
            <param name="fromStream">le flux d'origine</param>
            <param name="toStream">le flux de destination</param>
            <returns>le nombre d'octets copiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.CopyToFile(System.IO.Stream,System.String)">
            <summary>
            Copie le contenu d'un flux vers le fichier spécifié
            </summary>
            <param name="fromStream">le flux d'origine</param>
            <param name="path">le chemin du fichier de destination</param>
            <returns>le nombre d'octets copiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.AsNonClosing(System.IO.Stream)">
            <summary>
            Renvoie un wrapper autour d'un flux, qui ignore les demandes de fermeture de façon à éviter la fermeture
            du flux lorsque le reader ou writer qui travaille dessus est fermé
            </summary>
            <param name="stream">Le flux à wrapper</param>
            <returns>Un wrapper non-fermable autour de ce flux</returns>
        </member>
        <member name="T:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper">
            <summary>
            Wraps a stream for all operations except Close and Dispose, which
            merely flush the stream and prevent further operations from being
            carried out using this wrapper.
            <remarks>
            Cette classe provient de la librairie MiscUtil créée par Jon Skeet
            http://www.yoda.arachsys.com/csharp/miscutil/
            </remarks>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the class, wrapping the specified stream.
            </summary>
            <param name="stream">The stream to wrap. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
        </member>
        <member name="F:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.closed">
            <summary>
            Whether this stream has been closed or not
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.CheckClosed">
            <summary>
            Throws an InvalidOperationException if the wrapper is closed.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">
            The byte offset in buffer at which to begin writing data read from the stream.
            </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the read is complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular 
            asynchronous read request from other requests.
            </param>
            <returns>
            An IAsyncResult that represents the asynchronous read, 
            which could still be pending.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">
            An optional asynchronous callback, to be called when the write is complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous 
            write request from other requests.
            </param>
            <returns>
            An IAsyncResult that represents the asynchronous write, 
            which could still be pending.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.Close">
            <summary>
            This method is not proxied to the underlying stream; instead, the wrapper
            is marked as unusable for other (non-close/Dispose) operations. The underlying
            stream is flushed if the wrapper wasn't closed before this call.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.CreateObjRef(System.Type)">
            <summary>
            Throws a NotSupportedException.
            </summary>
            <param name="requestedType">The Type of the object that the new ObjRef will reference.</param>
            <returns>n/a</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">
            The reference to the pending asynchronous request to finish.
            </param>
            <returns>
            The number of bytes read from the stream, between zero (0) 
            and the number of bytes you requested. Streams only return 
            zero (0) at the end of the stream, otherwise, they should 
            block until at least one byte is available.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.InitializeLifetimeService">
            <summary>
            Throws a NotSupportedException.
            </summary>
            <returns>n/a</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying stream and advances the 
            position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains 
            the specified byte array with the values between offset and 
            (offset + count- 1) replaced by the bytes read from the underlying source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data 
            read from the underlying stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the 
            underlying stream.
            </param>
            <returns>The total number of bytes read into the buffer. 
            This can be less than the number of bytes requested if that many 
            bytes are not currently available, or zero (0) if the end of the 
            stream has been reached.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the 
            stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference 
            point used to obtain the new position.
            </param>
            <returns>The new position within the underlying stream.</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets the length of the underlying stream.
            </summary>
            <param name="value">The desired length of the underlying stream in bytes.</param>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the underlying stream and advances 
            the current position within the stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes 
            from buffer to the underlying stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at 
            which to begin copying bytes to the underlying stream.
            </param>
            <param name="count">The number of bytes to be written to the underlying stream.</param>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and
            advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param>
        </member>
        <member name="P:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.BaseStream">
            <summary>
            Stream wrapped by this wrapper
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.CanRead">
            <summary>
            Indicates whether or not the underlying stream can be read from.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.CanSeek">
            <summary>
            Indicates whether or not the underlying stream supports seeking.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.CanWrite">
            <summary>
            Indicates whether or not the underlying stream can be written to.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.Length">
            <summary>
            Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.StreamExtensions.NonClosingStreamWrapper.Position">
            <summary>
            Gets or sets the current position in the underlying stream.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.DateExtensions">
            <summary>
            Permets d'utiliser des methodes d'extensions sur les types de Date.
            En particulier, permets d'utiliser des expressions "à la Ruby" en C#
            Par exemple, plutot que de faire DateTime.Now.AddMinutes(5), on fera:
            5.Minutes().FromNow()
            </summary>)
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Days(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre de jours passé en paramètre
            </summary>
            <param name="value">Nombre de jours dans la période</param>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Hours(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre d'heures passé en paramètre
            </summary>
            <param name="value">Nombre de heures dans la période</param>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Minutes(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre de minutes passé en paramètre
            </summary>
            <param name="value">Nombre de minutes dans la période</param>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Seconds(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre de secondes passé en paramètre
            </summary>
            <param name="value">Nombre de secondes dans la période</param>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Ago(System.TimeSpan)">
            <summary>
            Retourne une date correspondant a la durée precedant la date courante
            </summary>
            <param name="timeSpan">Durée que l'on veut soustraire a la date courante</param>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.FromNow(System.TimeSpan)">
            <summary>
            Retourne une date correspondant a la durée suivant la date courante
            </summary>
            <param name="timeSpan">Durée que l'on veut ajouter a la date courante</param>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.From(System.TimeSpan,System.DateTime)">
            <summary>
            Retourne une date correspondant a la durée suivant la date de départ spécifiée
            </summary>
            <param name="timeSpan">Durée que l'on veut ajouter a la date de départ spécifiée</param>
            <param name="startDate">Date de départ</param>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Before(System.TimeSpan,System.DateTime)">
            <summary>
            Retourne une date correspondant a la durée précédent la date spécifiée
            </summary>
            <param name="timeSpan">Durée que l'on veut retrancher de la date spécifiée</param>
            <param name="endDate">Date de fin</param>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            Convertit un DateTime en timestamp unix
            </summary>
            <param name="dt">La date à convertir</param>
            <returns>Le timestamp UNIX équivalent</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.ToDateTime(System.Int64)">
            <summary>
            Convertit un timestamp Unix (date de référence = epoch) en DateTime
            </summary>
            <param name="timestamp">Le timestamp à convertir</param>
            <returns>Le DateTime équivalent</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Next(System.DateTime,System.DayOfWeek)">
            <summary>
            Renvoie le prochain jour de la semaine spécifié à partir d'une date
            </summary>
            <param name="from">la date à partir de laquelle on recherche</param>
            <param name="dayOfWeek">le jour de la semaine recherché</param>
            <returns>Le prochain <c>dayOfWeek</c> spécifié à partir de la date</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Previous(System.DateTime,System.DayOfWeek)">
            <summary>
            Renvoie le précédent jour de la semaine spécifié à partir d'une date
            </summary>
            <param name="from">la date à partir de laquelle on recherche</param>
            <param name="dayOfWeek">le jour de la semaine recherché</param>
            <returns>Le précédent <c>dayOfWeek</c> spécifié à partir de la date</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.EnumerableExtensions">
            <summary>
            Fournit des méthodes d'extension pour les types enumérables
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FormatAll(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Renvoie une chaine contenant chaque élément de l'énumération formaté avec
            le format spécifié
            </summary>
            <param name="enumerable">L'énumération à formater</param>
            <param name="format">Le format à appliquer à chaque élément, par exemple "x2" ou "{0:x2}"</param>
            <param name="separator">Le séparateur à insérer entre chaque élément</param>
            <returns>La chaine contenant tous les éléments formatés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Indique si une collection est nulle ou vide
            </summary>
            <param name="collection">La collection à tester</param>
            <returns>true si la collection est nulle ou vide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Synchronized``1(System.Collections.Generic.IList{``0})">
            <summary>
            Obtient une version synchronisée de la liste
            </summary>
            <typeparam name="T">Type générique de la liste</typeparam>
            <param name="list">liste</param>
            <returns>liste synchronisée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Permute deux éléments d'une liste
            </summary>
            <param name="list">La liste contenant les éléments à permuter</param>
            <param name="index1">L'index du premier élément</param>
            <param name="index2">L'index du second élément</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Fusionne 2 séquences selon la fonction de projection spécifiée, en faisant correspondre
            chaque élément de la première séquence à l'élément de même index dans la deuxième séquence.
            </summary>
            <typeparam name="TFirst">Type des éléments de la première séquence</typeparam>
            <typeparam name="TSecond">Type des éléments de la deuxième séquence</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence fusionnée</typeparam>
            <param name="first">première séquence</param>
            <param name="second">deuxième séquence</param>
            <param name="selector">fonction de projection pour fusionner des éléments des 2 séquences</param>
            <returns>Une séquence d'éléments fusionnée</returns>
            <remarks>Si les 2 séquences ne sont pas de même longueur </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Ajoute un élément à la suite de la séquence spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'origine</param>
            <param name="item">Elément à ajouter</param>
            <returns>La séquence d'origine suivie de l'élément spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Insère un élément au début de la séquence spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'origine</param>
            <param name="item">Elément à insérer</param>
            <returns>La séquence d'origine précédée de l'élément spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},Developpez.Dotnet.Threading.ThreadedWorker{``0}.CallBackMethod)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <typeparam name="T">Type de collection</typeparam>
            <param name="enumerable"></param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},Developpez.Dotnet.Threading.ThreadedWorker{``0}.CallBackMethod,System.Boolean)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <typeparam name="T">Type de collection</typeparam>
            <param name="enumerable"></param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},Developpez.Dotnet.Threading.ThreadedWorker{``0}.CallBackMethod,System.Boolean,System.Int32)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <typeparam name="T">Type de collection</typeparam>
            <param name="enumerable"></param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
            <param name="maxWorkerThreads">Nombre maximum de thread de travail dédié à cette tâche. Toute valeure inférieure à 1 est ignorée</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel(System.Collections.IEnumerable,Developpez.Dotnet.Threading.ThreadedWorker{System.Object}.CallBackMethod)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <param name="enumerable"></param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel(System.Collections.IEnumerable,Developpez.Dotnet.Threading.ThreadedWorker{System.Object}.CallBackMethod,System.Boolean)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <param name="enumerable"></param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel(System.Collections.IEnumerable,Developpez.Dotnet.Threading.ThreadedWorker{System.Object}.CallBackMethod,System.Boolean,System.Int32)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <param name="enumerable"></param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
            <param name="maxWorkerThreads">Nombre maximum de thread de travail dédié à cette tâche. Toute valeure inférieure à 1 est ignorée</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Mélange une liste.
            </summary>
            <param name="list">La liste à mélanger</param>
            <remarks>Cette méthode utilise l'algorithme de Fisher–Yates (http://en.wikipedia.org/wiki/Fisher-Yates_shuffle)
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour trouver un élément selon
            la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <returns>Le premier élément correspondant, s'il existe. Sinon, lève une InvalidOperationException.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.BinarySearchOrDefault``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour trouver un élément selon
            la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            Si aucun élément correspondant n'est trouvé, une valeur par défaut est renvoyée.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <returns>Le premier élément correspondant, s'il existe. Sinon, la valeur par défaut du type T.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.BinarySearchOrDefault``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1,``0)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour trouver un élément selon
            la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            Si aucun élément correspondant n'est trouvé, la valeur par défaut spécifiée est renvoyée.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si aucun élément correspondant n'est trouvé</param>
            <returns>Le premier élément correspondant, s'il existe. Sinon, la valeur par défaut spécifiée.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.TryBinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1,``0@)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour tenter de trouver un élément
            selon la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <param name="result">Paramètre de sortie qui prend la valeur du premier élément trouvé.</param>
            <returns>true si un élément correspondant est trouvé. Sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ToCsvString(System.Collections.IEnumerable,System.String)">
            <summary>
            Convertit une liste en une chaîne CSV avec le séparateur spécifié
            </summary>
            <param name="list">Liste à convertir</param>
            <param name="separator">Séparateur à utiliser</param>
            <returns>Une chaine CSV représentant les éléments de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ListFromCsv``1(System.String,System.String)">
            <summary>
            Convertit une chaine CSV en une liste d'objets du type spécifié
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="source">Chaîne CSV à convertir</param>
            <param name="separator">Séparateur à utiliser</param>
            <returns>Une liste contenant les éléments de la chaîne CSV</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Vérifie que la liste est triée, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Vérifie que la liste est triée, en utilisant la comparaison spécifiée
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparison">La comparaison à utiliser</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrdered``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Vérifie que la liste est triée, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Vérifie que la liste est triée en ordre descendant, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedDescending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Vérifie que la liste est triée en ordre descendant, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Vérifie que la liste est triée selon la clé de tri spécifiée, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Vérifie que la liste est triée selon la clé de tri spécifiée, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Vérifie que la liste est triée en ordre descendant selon la clé de tri spécifiée, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Vérifie que la liste est triée en ordre descendant selon la clé de tri spécifiée, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="T">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant le résultat
            de chaque étape de l'accumulation.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de la valeur d'accumulation</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="seed">Valeur d'accumulation initiale</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs d'accumulation à chaque étape.</returns>
            <remarks>Cette méthode est similaire à Enumerable.Aggregate, mais cette dernière ne renvoie que le résultat
            final, alors que SelectAggregate renvoie le résultat de chaque étape.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant le résultat
            de chaque étape de l'accumulation.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de la valeur d'accumulation</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs d'accumulation à chaque étape.</returns>
            <remarks>Cette méthode est similaire à Enumerable.Aggregate, mais cette dernière ne renvoie que le résultat
            final, alors que SelectAggregate renvoie le résultat de chaque étape.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},``1,``1,System.Func{``0,``1,``1,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant le résultat
            de chaque étape de l'accumulation. La fonction d'accumulation prend en paramètre
            les 2 valeurs d'accumulation précédentes.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de la valeur d'accumulation</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="seed1">Valeur d'accumulation initiale (itération -1)</param>
            <param name="seed2">Valeur d'accumulation initiale (itération -2)</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs d'accumulation à chaque étape.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``1,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant le résultat
            de chaque étape de l'accumulation. La fonction d'accumulation prend en paramètre
            les 2 valeurs d'accumulation précédentes.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de la valeur d'accumulation</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs d'accumulation à chaque étape.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Retourne le premier élément d'une séquence, ou la valeur par défaut spécifiée si la séquence ne contient aucun élément.
            </summary>
            <typeparam name="T">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner le premier élément</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si la séquence est vide</param>
            <returns>Le premier élément de source s'il existe, sinon la valeur par défaut spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Retourne le premier élément de la séquence à satisfaire à une condition, ou la valeur par défaut spécifiée
            si aucun élément correspondant n'est trouvé.
            </summary>
            <typeparam name="T">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="predicate">Condition à vérifier</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si aucun élément ne satisfait la condition</param>
            <returns>Le premier élément de source à satisfaire la condition, ou la valeur par défaut spécifiée si aucun
            élément ne satisfait la condition</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Retourne le dernier élément d'une séquence, ou la valeur par défaut spécifiée si la séquence ne contient aucun élément.
            </summary>
            <typeparam name="T">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner le dernier élément</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si la séquence est vide</param>
            <returns>Le dernier élément de source s'il existe, sinon la valeur par défaut spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Retourne le dernier élément de la séquence à satisfaire à une condition, ou la valeur par défaut spécifiée
            si aucun élément correspondant n'est trouvé.
            </summary>
            <typeparam name="T">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="predicate">Condition à vérifier</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si aucun élément ne satisfait la condition</param>
            <returns>Le dernier élément de source à satisfaire la condition, ou la valeur par défaut spécifiée si aucun
            élément ne satisfait la condition</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Retourne l'élément situé à un index spécifié dans une séquence, ou la valeur par défaut spécifiée si l'index est hors limites.
            </summary>
            <typeparam name="T">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="index">Index de l'élément à récupérer</param>
            <param name="defaultValue">Valeur par défaut à renvoyer si l'index est hors-limite</param>
            <returns>L'élément à l'index spécifié s'il existe ; sinon, la valeur par défaut spécifiée.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Retourne l'unique élément d'une séquence, ou la valeur par défaut spécifiée si la séquence n'a aucun élément.
            Lève une exception si la séquence contient plus d'un élément
            </summary>
            <typeparam name="T">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="defaultValue">Valeur par défaut à retourner si la séquence est vide</param>
            <returns>L'unique élément de la séquence, ou la valeur par défaut spécifiée si la séquence est vide</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Retourne l'unique élément d'une séquence qui satisfait une condition, ou la valeur par défaut
            spécifiée si aucun élément ne satisfait la condition.
            Lève une exception si plusieurs éléments satisfont la condition.
            </summary>
            <typeparam name="T">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="predicate">La condition à vérifier</param>
            <param name="defaultValue">Valeur par défaut à retourner si aucun élément ne satisfait la condition</param>
            <returns>L'unique élément de la séquence, ou la valeur par défaut spécifiée si aucun élément ne satisfait la condition</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.WithMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Renvoie l'élément de la liste ayant la plus grande valeur pour la fonction spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <typeparam name="TValue">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Liste d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <returns>L'élément ayant la plus petite valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.WithMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Renvoie l'élément de la liste ayant la plus petite valeur pour la fonction spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <typeparam name="TValue">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Liste d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <returns>L'élément ayant la plus petite valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Trie la liste en utilisant l'algorithme Quicksort
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste à trier</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSortBy``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Trie la liste selon la clé spécifiée en utilisant l'algorithme Quicksort
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <param name="list">Liste à trier</param>
            <param name="keySelector">Fonction qui renvoie la clé de tri</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Trie la liste en utilisant l'algorithme Quicksort, avec le comparateur spécifié
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste à trier</param>
            <param name="comparer">Comparateur à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Trie la liste en utilisant l'algorithme Quicksort, avec la fonction de comparaison spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste à trier</param>
            <param name="comparison">Fonction de comparaison à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AsIndexed``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Associe à chaque élément de la séquence son index dans la séquence
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'éléments à indexer</param>
            <returns>Une séquence projetée où chaque élément est associé à son index</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Unindex``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem{``0}})">
            <summary>
            Dissocie chaque élément de la séquence de son index. Cette méthode effectue l'opération inverse de AsIndexed.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'éléments à dissocier de leur index</param>
            <returns>Une séquence d'éléments sans leur index</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Extrait un élément sur <c>frequency</c> à partir de la séquence d'entrée, à partir du premier élément.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à extraire</param>
            <returns>Une séquence contenant un élément sur <c>frequency</c> de la séquence d'entrée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extrait un élément sur <c>frequency</c> à partir de la séquence d'entrée, à partir de la position spécifiée.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à extraire</param>
            <param name="start">Position du premier élément à extraire</param>
            <returns>Une séquence contenant un élément sur <c>frequency</c> de la séquence d'entrée à partir de la position spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Renvoie les éléments de la séquence d'entrée, en sautant un élément sur <c>frequency</c> à partir de la position spécifiée.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à sauter</param>
            <returns>Une séquence les éléments de la séquence d'entrée, en en sautant un sur <c>frequency</c> à partir de la position spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Renvoie les éléments de la séquence d'entrée, en sautant un élément sur <c>frequency</c> à partir du premier élément.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à sauter</param>
            <param name="start">Position du premier élément à sauter</param>
            <returns>Une séquence les éléments de la séquence d'entrée, en en sautant un sur <c>frequency</c> à partir du premier.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.GroupEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Renvoie les éléments de la séquence d'entrée par groupes de <c>groupLength</c> éléments.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'éléments à grouper</param>
            <param name="groupLength">Longueur des groupes</param>
            <returns></returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem`1">
            <summary>
            Associe un index à un élément d'une séquence
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem`1.Index">
            <summary>
            Index de l'élément
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem`1.Value">
            <summary>
            Valeur de l'élément
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.RandomExtensions">
            <summary>
            Fournit des méthodes d'extension pour le type Random
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.RandomExtensions.Pick``1(System.Random,System.Collections.Generic.ICollection{``0})">
            <summary>
            Renvoie un élément choisi aléatoirement dans la collection spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <param name="random">Object Random à utiliser</param>
            <param name="items">Collection dans laquelle choisir un élément</param>
            <returns>Un élément choisi aléatoirement dans la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.RandomExtensions.Pick``1(System.Random,``0,``0,``0[])">
            <summary>
            Renvoie un objet choisi aléatoirement parmi les paramètres spécifiés
            </summary>
            <typeparam name="T">Type d'objet à choisir</typeparam>
            <param name="random">Objet Random à utiliser</param>
            <param name="first">Premier paramètre</param>
            <param name="second">Second paramètre</param>
            <param name="others">Autres paramètres</param>
            <returns>Un objet choisi aléatoirement parmi les paramètres spécifiés</returns>
        </member>
        <member name="T:Developpez.Dotnet.Reflection.ReflectionExtensions">
            <summary>
            Fournit des méthodes d'extension pour faciliter l'utilisation de la réflexion
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.Is(System.Type,System.Type)">
            <summary>
            Détermine si un type hérite d'un autre type, ou implémente une interface
            </summary>
            <param name="type">Le type à vérifier</param>
            <param name="superType">Le type de base dont <c>type</c> doit hériter</param>
            <returns>true si <c>type</c> est <c>superType</c>, hérite de <c>superType</c>, ou implémente <c>superType</c>. Sinon, false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.Is``1(System.Type)">
            <summary>
            Détermine si un type hérite d'un autre type, ou implémente une interface
            </summary>
            <typeparam name="T">Le type de base dont <c>type</c> doit hériter</typeparam>
            <param name="type">Le type à vérifier</param>
            <returns>true si <c>type</c> est <c>T</c>, hérite de <c>T</c>, ou implémente <c>T</c>. Sinon, false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <param name="attributeType">Le type de l'attribut à rechercher</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <param name="attributeType">Le type de l'attribut à rechercher</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <returns>Une liste des attributs appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut à rechercher</typeparam>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut à rechercher</typeparam>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.DefaultDictionary`2">
            <summary>
            Représente un dictionnaire dont toutes les clés sont supposées définies. Si une clé demandée
            n'existe pas dans le dictionnaire, elle est automatiquement créée avec la valeur par défaut ou
            le delegate spécifié
            </summary>
            <typeparam name="K">Type de la clé</typeparam>
            <typeparam name="V">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si une clé demandée est absente,
            elle est ajoutée avec la valeur par défaut du type de valeur du dictionnaire.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor(`1)">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si une clé demandée est absente,
            elle est ajoutée avec la valeur par défaut spécifiée.
            <param name="defaultValue">La valeur par défaut à utiliser pour les clés absentes</param>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si une clé demandée est absente,
            elle est ajoutée avec la valeur renvoyée par le delegate fourni en paramètre.
            <param name="defaultValueGenerator">Une fonction qui renvoie une valeur initiale pour une clé absente</param>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. Si la clé n'existe pas, elle est ajoutée au
            dictionnaire avec une valeur par défaut.
            </summary>
            <param name="key">La clé recherchée</param>
            <param name="value">Paramètre de sortie auquel la valeur trouvée est affectée</param>
            <returns>Toujours true</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DefaultDictionary`2.Item(`0)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. Si la clé n'existe pas, elle est ajoutée au
            dictionnaire avec une valeur par défaut.
            </summary>
            <param name="key">La clé pour laquelle retourner une valeur</param>
            <returns>La valeur correspondant à la clé</returns>
        </member>
        <member name="T:Developpez.Dotnet.TemporaryString">
            <summary>
            Représente une chaîne de caractères à durée de vie limitée.
            Lorsque la durée de vie expire, la chaîne de caractères est vidée.
            La durée de vie est réinitialisée à chaque ajout de caractère.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.TemporaryString._DEFAULTLIFETIME">
            <summary>
            Durée de vie par défaut.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.TemporaryString._Timer">
            <summary>
            Instance du Timer.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.TemporaryString._Value">
            <summary>
            Chaîne de caractères.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> avec la durée de vie par défaut.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor(System.Double)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> avec la durée de vie donnée.
            </summary>
            <param name="lifeTime">Durée de vie (en millisecondes).</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor(System.String)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> avec la valeur initiale donnée.
            </summary>
            <param name="value">Valeur initiale.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor(System.Double,System.String)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> 
            avec la durée de vie et la valeur initiale données.
            </summary>
            <param name="lifeTime">Durée de vie.</param>
            <param name="value">Valeur initiale.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString._Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Elapsed timer event.
            </summary>
            <param name="sender">Source object.</param>
            <param name="e">Elapsed event arguments.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.Append(System.Char)">
            <summary>
            Ajoute un caractère à la fin de la chaîne.
            </summary>
            <param name="value">Le caractère Unicode à ajouter.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.Append(System.Char[])">
            <summary>
            Ajoute un tableau de caractères à la fin de cette instance.
            </summary>
            <param name="value">Le tableau de caractères Unicode à ajouter.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.Append(System.String)">
            <summary>
            Ajoute une chaîne de caractères à la chaîne courante.
            </summary>
            <param name="value">Chaîne de caractères à ajouter à la chaîne courante.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.ToString">
            <summary>
            Retourne une chaîne de caractères représentant l'instance courante.
            </summary>
            <returns>Une chaîne de caractères représentant l'instance courante.</returns>
        </member>
        <member name="E:Developpez.Dotnet.TemporaryString.Reset">
            <summary>
            Evènement levé lorsque la durée de vie a expiré.
            <remarks>La chaîne de caractère est vidée.</remarks>
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.TemporaryString.CharAdded">
            <summary>
            Evènement levé lorsqu'un caractère a été ajouté à l'instance.
            <remarks>La durée de vie est réinitialisée.</remarks>
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Roman">
            <summary>
            Un nombre en chiffres romains.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._Symbols">
            <summary>
            "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._Values">
            <summary>
            1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._MaxValueExceptionMessage">
            <summary>
            Un chiffre romain ne peut pas être inférieur à 1.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._MinValueExceptionMessage">
            <summary>
            Un chiffre romain ne peut pas être supérieur à 4999.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._InvalidStringExceptionMessage">
            <summary>
            Le format de la chaîne d'entrée est incorrect.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._InvalidCastFromToExceptionMessage">
            <summary>
            Cast invalide de 'Roman' en 'type'.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._StandardPattern">
            <summary>
            Expression régulière de validation d'un nombre romain.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._NullInnerValue">
            <summary>
            Représente un nombre romain nul.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._MinInnerValue">
            <summary>
            Représente le nombre romain le plus petit.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._MaxInnerValue">
            <summary>
            Représente le nombre romain le plus grand.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._InnerValue">
            <summary>
            La valeur interne du nombre romain.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman.Null">
            <summary>
            Représente la valeur nulle 
            (cette valeur n'a aucun équivalent
            en chiffres romains).
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman.MinValue">
            <summary>
            Représente le nombre romain le plus petit.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman.MaxValue">
            <summary>
            Représente le nombre romain le plus grand.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Roman.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.Roman"/>
            à partir d'un nombre entier.
            </summary>
            <param name="value">Entier.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.#ctor(System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.Roman"/>
            à partir d'une chaîne de caractères.
            </summary>
            <param name="value">Chaîne de caractères.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.Int32)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.Int32,System.Boolean)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
            <param name="raiseException">Indique si la méthode doit lever une exception ou pas.</param>
            <returns>Vrai si la valeur donnée respecte les spécifications d'un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.String)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.String,System.Boolean)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
            <param name="raiseException">Indique si la méthode doit lever une exception ou pas.</param>
            <returns>Vrai si la valeur donnée respecte les spécifications d'un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToInt(System.String)">
            <summary>
            Retourne un entier à partir d'une chaîne de caractères donnée représentant un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
            <returns>L'entier correspondant à la chaîne de caractères.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToString(System.Int32)">
            <summary>
            Retourne une chaîne de caractères représentant un nombre romain à partir d'un entier donné.
            </summary>
            <param name="value">Valeur.</param>
            <returns>La chaîne de caractères représentant un nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Parse(System.String)">
            <summary>
            Convertit la chaîne de caractères représentant un nombre romain en nombre romain.
            </summary>
            <param name="s">Chaîne de caractères représentant un nombre romain.</param>
            <returns>Le nombre romain correspondant à la chaîne de caractères.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Parse(System.Int32)">
            <summary>
            Convertit l'entier représentant un nombre romain en nombre romain.
            </summary>
            <param name="i">Entier représentant un nombre romain.</param>
            <returns>Le nombre romain correspondant à l'entier.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.TryParse(System.String,Developpez.Dotnet.Roman@)">
            <summary>
            Indique si la chaîne de caractères représente un nombre romain.
            Une valeur de retour renvoie ce nombre romain.
            </summary>
            <param name="s">Chaîne de caractères représentant un nombre romain.</param>
            <param name="result">Le nombre romain correspondant à la chaîne de caractères.</param>
            <returns>Vrai si la chaîne de caractères représente un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.TryParse(System.Int32,Developpez.Dotnet.Roman@)">
            <summary>
            Indique si l'entier représente un nombre romain.
            Une valeur de retour renvoie ce nombre romain.
            </summary>
            <param name="i">Entier représentant un nombre romain.</param>
            <param name="result">Le nombre romain correspondant à l'entier.</param>
            <returns>Vrai si l'entier représente un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToInt">
            <summary>
            Retourne l'entier correspondant à l'instance de la classe <see cref="T:Developpez.Dotnet.Roman"/>.
            </summary>
            <returns>L'entier correspondant à l'instance de la classe <see cref="T:Developpez.Dotnet.Roman"/>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.GetHashCode">
            <summary>
            Retourne le code de hachage de l'instance actuelle.
            </summary>
            <returns>le code de hachage de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Equals(System.Object)">
            <summary>
            Détermine si l'objet spécifié a la même valeur que l'instance actuelle.
            </summary>
            <param name="obj">objet à comparer</param>
            <returns>true si l'objet spécifié est égal à l'instance actuelle, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CompareTo(System.Object)">
            <summary>
            Compare cette instance à l'objet spécifié et retourne une indication de leurs valeurs relatives
            </summary>
            <param name="value">objet à comparer</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et value
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à value.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à value.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à value.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.GetTypeCode">
            <summary>
            Retourne le TypeCode  du type Roman. 
            </summary>
            <returns>le TypeCode  du type Roman</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>true si la valeur de ce Roman est différente de 0, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Byte</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Char</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en DateTime</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Decimal</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Double</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Int16</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Int32</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Int64</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en SByte</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Single</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToString(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en String</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>
            </summary>
            <param name="conversionType">Type dans lequel convertir cette valeur Roman.</param>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie vers le type spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en UInt16</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en UInt32</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en UInt64</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CompareTo(Developpez.Dotnet.Roman)">
            <summary>
            Compare cette instance au Roman spécifié et retourne une indication de leurs valeurs relatives
            </summary>
            <param name="other">objet à comparer</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Equals(Developpez.Dotnet.Roman)">
            <summary>
            Retourne une valeur indiquant si cette instance équivaut à une valeur Roman spécifiée.
            </summary>
            <param name="other">Valeur Int32  à comparer à cette instance.</param>
            <returns>true si other possède la même valeur que cette instance ; sinon, false. </returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Addition(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Additionne deux nombres romains.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est la somme de r1 et r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Increment(Developpez.Dotnet.Roman)">
            <summary>
            Incrémente un nombre romain de un.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>Le nombre romain incrémenté de un.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Subtraction(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Soustrait un nombre romain d'un autre nombre romain
            pour donner un troisième nombre romain.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est la différence de r1 par rapport à r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Decrement(Developpez.Dotnet.Roman)">
            <summary>
            Décrémente un nombre romain de un.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>Le nombre romain décrémenté de un.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Modulus(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Retourne le reste d'une division d'un nombre romain par un autre nombre romain.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est le modulo de r1 par rapport à r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Multiply(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Multiplie deux nombres romains
            pour donner un troisième nombre romain.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est le produit de r1 et r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Division(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Divise un nombre romain par un autre nombre romain
            pour donner un troisième nombre romain (partie entière du quotient).
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est la partie entière du quotient de r1 par rapport à r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Equality(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si les deux nombre romains donnés sont égaux.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si les deux nombre romains donnés sont égaux, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_GreaterThan(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est strictement supérieur à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est strictement supérieur à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_GreaterThanOrEqual(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est supérieur ou égal à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est supérieur ou égal à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Inequality(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est différent de r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est différent de r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_LessThan(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est strictement inférieur à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est strictement inférieur à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_LessThanOrEqual(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est inférieur ou égal à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est inférieur ou égal à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(Developpez.Dotnet.Roman)~System.Int32">
            <summary>
            Convertit un nombre romain en entier.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>L'entier correspondant au nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(System.Int32)~Developpez.Dotnet.Roman">
            <summary>
            Convertit un entier en nombre romain.
            </summary>
            <param name="i">Entier.</param>
            <returns>Le nombre romain correspondant à l'entier.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(Developpez.Dotnet.Roman)~System.Int16">
            <summary>
            Convertit un nombre romain en entier 16 bits.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>L'entier 16 bits correspondant au nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(System.Int16)~Developpez.Dotnet.Roman">
            <summary>
            Convertit un entier en nombre romain.
            </summary>
            <param name="i">Entier 16 bits.</param>
            <returns>Le nombre romain correspondant à l'entier 16 bits.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(Developpez.Dotnet.Roman)~System.Int64">
            <summary>
            Convertit un nombre romain en entier 64 bits.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>L'entier 64 bits correspondant au nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(System.Int64)~Developpez.Dotnet.Roman">
            <summary>
            Convertit un entier 64 bits en nombre romain.
            </summary>
            <param name="i">Entier 64 bits.</param>
            <returns>Le nombre romain correspondant à l'entier 64 bits.</returns>
        </member>
        <member name="T:Developpez.Dotnet.NumberConverter">
            <summary>
            Classe statique de conversion d'un nombre en toutes lettres
            (en français uniquement).
            </summary>
            <remarks>Sources pour les règles d'écriture : 
            - http://fr.wikipedia.org/wiki/Nombres_en_fran%C3%A7ais
            - http://www.miakinen.net/vrac/nombres .</remarks>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.MakeTwentyAgree(System.Int32,System.Int32,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Accorder le mot "vingt".
            </summary>
            <returns>Un "s" si le nombre se termine par vingt et n'est pas suivi de "mille".
            Chaîne vide sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.MakeHundredAgree(System.Int64,System.Int64,System.Int32,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Accorder le mot "cent".
            </summary>
            <returns>Un "s" si le nombre est un multiple de 100, strictement supérieur à 100 et n'est pas suivi de "mille".
            Chaîne vide sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.MakeThousandPowerAgree(System.Int64,System.Int32)">
            <summary>
            Accorder la puissance de mille donnée.
            </summary>
            <returns>Un "s" si le nombre strictement supérieur à 1 et n'est pas "mille".
            Chaîne vide sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.InnerSpell(System.UInt64,System.Boolean,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="negative">Le nombre est négatif.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.HighNumbersSpell(System.UInt64,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit le nombre entier en toutes lettres (nombres supérieurs à 1000).
            </summary>
            <param name="value">Nombre entier (supérieur à 1000).</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.HundredsAndUnitsSpell(System.Int32,System.Int32,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres (nombres entre 0 et 999).
            </summary>
            <param name="value">Nombre entier (entre 0 et 999).</param>
            <param name="thousandPower">La puissance de mille du nombre.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int32)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int32,Developpez.Dotnet.Language.Grammar.Gender)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int32,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt32)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt32,Developpez.Dotnet.Language.Grammar.Gender)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt32,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int64)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int64,Developpez.Dotnet.Language.Grammar.Gender)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int64,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt64)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt64,Developpez.Dotnet.Language.Grammar.Gender)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt64,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="T:Developpez.Dotnet.Data.DataExtensions">
            <summary>
            Fournit des méthodes d'extension pour faciliter l'utilisation des classes ADO.NET
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.CreateCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            Crée une commande à partir d'une connection et d'une requête
            </summary>
            <param name="connection">La connection</param>
            <param name="commandText">Le texte de la requête</param>
            <returns>Une commande pour la connexion et la requête spécifiées</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="size">La taille du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="direction">La direction du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="size">La taille du paramètre</param>
            <param name="direction">La direction du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetBoolean(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Boolean
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetByte(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Byte
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetChar(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Char
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDateTime(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que DateTime
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDecimal(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Decimal
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDouble(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Double
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetFloat(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Float
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetGuid(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Guid
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt16(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int16
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt32(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int32
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt64(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int64
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetString(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que String
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetValue(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetBytes(System.Data.Common.DbDataReader,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Lit un flux binaire de la colonne spécifiée
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à lire</param>
            <param name="dataOffset">La position à laquelle commence la lecture dans la colonne</param>
            <param name="buffer">Le buffer de destination</param>
            <param name="bufferOffset">La position à laquelle commence l'écriture dans le buffer</param>
            <param name="length">Le nombre maximum d'octets à lire</param>
            <returns>Le nombre d'octets lus</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetChars(System.Data.Common.DbDataReader,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Lit un flux de caractères de la colonne spécifiée
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à lire</param>
            <param name="dataOffset">La position à laquelle commence la lecture dans la colonne</param>
            <param name="buffer">Le buffer de destination</param>
            <param name="bufferOffset">La position à laquelle commence l'écriture dans le buffer</param>
            <param name="length">Le nombre maximum de caractères à lire</param>
            <returns>Le nombre de caractères lus</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Field``1(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Renvoie la valeur de la colonne spécifiée en la convertissant dans le type voulu
            </summary>
            <typeparam name="T">Le type de retour souhaité</typeparam>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
            <exception cref="T:System.InvalidCastException">La conversion spécifiée n'est pas valide</exception>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Field``1(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            Renvoie la valeur de la colonne spécifiée en la convertissant dans le type voulu
            </summary>
            <typeparam name="T">Le type de retour souhaité</typeparam>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="ordinal">L'index de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
            <exception cref="T:System.InvalidCastException">La conversion spécifiée n'est pas valide</exception>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.IsDBNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Indique si la colonne spécifiée a la valeur DBNull
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne à lire</param>
            <returns>True si la colonne vaut DBNull, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDataTypeName(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Renvoie le nom du type de données de la colonne spécifiée
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne dont on veut obtenir le type de données</param>
            <returns>Le nom du type de données de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetFieldType(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Renvoie le type .NET de la colonne spécifiée
            </summary>
            <param name="reader">Le DataReader qui lit les données</param>
            <param name="name">Le nom de la colonne dont on veut obtenir le type .NET</param>
            <returns>Le nom type .NET de la colonne</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.CompareExtensions">
            <summary>
            Fournit des méthodes d'extension pour travailler avec des IComparer&lt;T&gt; et des Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.ToComparer``1(System.Comparison{``0})">
            <summary>
            Obtient un IComparer&lt;T&gt; à partir de la comparaison spécifiée
            </summary>
            <typeparam name="T">Type des éléments à comparer</typeparam>
            <param name="comparison">La comparaison à utiliser</param>
            <returns>Un IComparer&lt;T&gt; qui utilise la comparaison spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.ToComparison``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Obtient une Comparison&lt;T&gt; à partir du IComparer&lt;T&gt; spécifié
            </summary>
            <typeparam name="T">Type des éléments à comparer</typeparam>
            <param name="comparer">Comparateur à utiliser</param>
            <returns>La comparaison équivalente au IComparer&lt;T&gt; spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.Reverse``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Inverse le IComparer&lt;T&gt; spécifié
            </summary>
            <typeparam name="T">Le type des éléments à comparer</typeparam>
            <param name="comparer">Le comparateur à inverser</param>
            <returns>Un comparateur avec une logique inversée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.Reverse``1(System.Comparison{``0})">
            <summary>
            Inverse la Comparison&lt;T&gt; spécifiée
            </summary>
            <typeparam name="T">Le type des éléments à comparer</typeparam>
            <param name="comparison">La comparaison à inverser</param>
            <returns>Une comparaison avec une logique inversée</returns>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.IBAN">
            <summary>
            Vérification d'un numéro IBAN
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.IBAN.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro IBAN
            </summary>
            <param name="number">Numéro IBAN à vérifier</param>
            <returns>true si le numéro est valide, false sinon</returns>
        </member>
        <member name="T:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2">
            <summary>
            Une collection de paires clé/valeurs pour permettre la sérialisation XML d'un dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.#ctor">
            <summary>
            Initialise une nouvelle instance de XmlDictionaryEntryCollection
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de XmlDictionaryEntryCollection pour le dictionnaire spécifié
            </summary>
            <param name="dictionary">Le dictionnaire pour lequel on veut obtenir la collection de paires clé/valeur</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Add(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1})">
            <summary>
            Ajoute une paire clé/valeur à la collection
            </summary>
            <param name="item">Paire clé/valeur à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Clear">
            <summary>
            Vide la collection
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Contains(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1})">
            <summary>
            Teste si la collection contient la paire clé/valeur spécifiée
            </summary>
            <param name="item">La paire clé/valeur à rechercher</param>
            <returns>true si la collection contient la paire clé/valeur spécifiée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.CopyTo(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1}[],System.Int32)">
            <summary>
            Copie les paires clé/valeur de la collection vers un tableau
            </summary>
            <param name="array">Le tableau vers lequel copier les données</param>
            <param name="arrayIndex">L'index dans array où la copie commence</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Remove(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1})">
            <summary>
            Supprime une paire clé/valeur de la collection
            </summary>
            <param name="item">La paire clé/valeur à supprimer</param>
            <returns>true si la paire clé/valeur a été supprimée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.GetEnumerator">
            <summary>
            Renvoie un objet qui énumére les éléments de la collectino
            </summary>
            <returns>Un énumérateur qui parcourt les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Renvoie un objet qui énumére les éléments de la collectino
            </summary>
            <returns>Un énumérateur qui parcourt les éléments de la collection</returns>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Dictionary">
            <summary>
            Renvoie le dictionnaire correspondant à cette XmlDictionaryEntryCollection
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Count">
            <summary>
            Renvoie le nombre d'éléments dans la collection
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.IsReadOnly">
            <summary>
            Indique si la collection est en lecture seule
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Text.StringTemplate">
            <summary>
            Représente un modèle de chaine de caractères, où on peut utiliser des noms plutôt que des index
            pour les valeurs à remplacer.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.#ctor(System.String)">
            <summary>
            Initialise une nouvelle instance de StringTemplate avec le template à utiliser
            </summary>
            <param name="template">Le template à utiliser. Le format est identique à celui accepté par String.Format,
            mais avec des noms à la place des index pour les valeurs à remplacer</param>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.op_Implicit(System.String)~Developpez.Dotnet.Text.StringTemplate">
            <summary>
            Convertit une chaine en StringTemplate
            </summary>
            <param name="s">La chaine à convertir</param>
            <returns>Un StringTemplate utilisant la chaine convertie comme template</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.ToString">
            <summary>
            Renvoie une chaine représentant cette instance de StringTemplate.
            </summary>
            <returns>Le template utilisé par ce StringTemplate</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans le dictionnaire spécifié
            </summary>
            <param name="values">Le dictionnaire contenant les valeurs pour les placeholders</param>
            <returns>La chaine formattée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.Object)">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans l'objet spécifié
            </summary>
            <param name="values">L'objet contenant les valeurs pour les placeholders. Chaque propriété de
            l'objet correspond à un placeholder du template</param>
            <returns>La chaine formattée</returns>
            <remarks>Cette méthode s'utilise typiquement avec un objet de type anonyme, créé avec la syntaxe
            <c>new { nom1 = valeur1, nom2 = valeur2 }</c></remarks>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Remplace les placeholders du template spécifié par les valeurs fournies dans le dictionnaire spécifié
            </summary>
            <param name="template">Le template à utiliser</param>
            <param name="values">Le dictionnaire contenant les valeurs pour les placeholders</param>
            <returns>La chaine formattée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.String,System.Object)">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans l'objet spécifié
            </summary>
            <param name="template">Le template à utiliser</param>
            <param name="values">L'objet contenant les valeurs pour les placeholders. Chaque propriété de
            l'objet correspond à un placeholder du template</param>
            <returns>La chaine formattée</returns>
            <remarks>Cette méthode s'utilise typiquement avec un objet de type anonyme, créé avec la syntaxe
            <c>new { nom1 = valeur1, nom2 = valeur2 }</c></remarks>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallMonitorExtensions">
            <summary>
            Classe d'extension afin de fournir aux objets de type <see cref="T:System.MarshalByRefObject"/> la possibilité
            d'être englobés dans des proxy afin de fournir des outils de diagnostique pour mesurer le nombre et
            la durée des appels des différents objets
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitorExtensions.WrapForCallMonitor``1(System.MarshalByRefObject,Developpez.Dotnet.Diagnostics.MethodCallMonitor{``0}@)">
            <summary>
            Renvoi un objet du type de T, auquel on peut attacher des évènements grâce à wrappedEvents
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="wrappedEvents">Classe qui va permettre d'intercepter les appels aux méthodes de la fonction via des évènements</param>
            <returns>L'objet wrappé auquel sera associé les différents évènements attachés grâce à wrappedEvents</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.DictionaryExtensions">
            <summary>
            Fournit des méthodes d'extension pour manipuler des dictionnaires
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Renvoie la valeur correspondant à la clé spécifiée si celle-ci existe, ou la valeur par défaut
            spécifiée si la clé n'existe pas
            </summary>
            <typeparam name="K">Type de la clé</typeparam>
            <typeparam name="V">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire à partir duquel renvoyer la valeur</param>
            <param name="key">La clé recherchée</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si la clé n'existe pas</param>
            <returns>Si la clé existe, renvoie la valeur correspondante. Sinon, renvoie la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Renvoie la valeur correspondant à la clé spécifiée si celle-ci existe, ou la valeur par défaut
            du type de la valeur si la clé n'existe pas
            </summary>
            <typeparam name="K">Type de la clé</typeparam>
            <typeparam name="V">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire à partir duquel renvoyer la valeur</param>
            <param name="key">La clé recherchée</param>
            <returns>Si la clé existe, renvoie la valeur correspondante. Sinon, renvoie la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Renvoie un wrapper en lecture seule pour un dictionnaire
            </summary>
            <typeparam name="K">Type de la clé</typeparam>
            <typeparam name="V">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire pour lequel renvoyer un wrapper</param>
            <returns>Un wrapper en lecture seule pour le dictionnaire</returns>
        </member>
    </members>
</doc>
