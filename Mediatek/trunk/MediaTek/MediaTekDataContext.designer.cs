#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaTek
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="dvd")]
	public partial class MediaTekDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertDirector(Director instance);
    partial void UpdateDirector(Director instance);
    partial void DeleteDirector(Director instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertLend(Lend instance);
    partial void UpdateLend(Lend instance);
    partial void DeleteLend(Lend instance);
    partial void InsertMediaType(MediaType instance);
    partial void UpdateMediaType(MediaType instance);
    partial void DeleteMediaType(MediaType instance);
    #endregion
		
		public MediaTekDataContext() : 
				base(global::MediaTek.Properties.Settings.Default.SQLServerCS, mappingSource)
		{
			OnCreated();
		}
		
		public MediaTekDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaTekDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaTekDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaTekDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<Director> Directors
		{
			get
			{
				return this.GetTable<Director>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Lend> Lends
		{
			get
			{
				return this.GetTable<Lend>();
			}
		}
		
		public System.Data.Linq.Table<MediaType> MediaTypes
		{
			get
			{
				return this.GetTable<MediaType>();
			}
		}
	}
	
	[Table(Name="country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _LanguageId;
		
		private EntitySet<Director> _Directors;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLanguageIdChanging(System.Nullable<int> value);
    partial void OnLanguageIdChanged();
    #endregion
		
		public Country()
		{
			this._Directors = new EntitySet<Director>(new Action<Director>(this.attach_Directors), new Action<Director>(this.detach_Directors));
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="language_id", Storage="_LanguageId", DbType="Int")]
		public System.Nullable<int> LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[Association(Name="Country_Director", Storage="_Directors", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Director> Directors
		{
			get
			{
				return this._Directors;
			}
			set
			{
				this._Directors.Assign(value);
			}
		}
		
		[Association(Name="Language_Country", Storage="_Language", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._LanguageId = value.Id;
					}
					else
					{
						this._LanguageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Directors(Director entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Directors(Director entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private System.Nullable<int> _DirectorId;
		
		private string _Year;
		
		private int _MediaTypeId;
		
		private string _OriginalTitle;
		
		private System.Nullable<int> _LanguageId;
		
		private byte[] _CoverRaw;
		
		private EntitySet<Lend> _Lends;
		
		private EntityRef<Director> _Director;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<MediaType> _MediaType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDirectorIdChanging(System.Nullable<int> value);
    partial void OnDirectorIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnMediaTypeIdChanging(int value);
    partial void OnMediaTypeIdChanged();
    partial void OnOriginalTitleChanging(string value);
    partial void OnOriginalTitleChanged();
    partial void OnLanguageIdChanging(System.Nullable<int> value);
    partial void OnLanguageIdChanged();
    partial void OnCoverRawChanging(byte[] value);
    partial void OnCoverRawChanged();
    #endregion
		
		public Movie()
		{
			this._Lends = new EntitySet<Lend>(new Action<Lend>(this.attach_Lends), new Action<Lend>(this.detach_Lends));
			this._Director = default(EntityRef<Director>);
			this._Language = default(EntityRef<Language>);
			this._MediaType = default(EntityRef<MediaType>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="title", Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Name="director_id", Storage="_DirectorId", DbType="Int")]
		public System.Nullable<int> DirectorId
		{
			get
			{
				return this._DirectorId;
			}
			set
			{
				if ((this._DirectorId != value))
				{
					this.OnDirectorIdChanging(value);
					this.SendPropertyChanging();
					this._DirectorId = value;
					this.SendPropertyChanged("DirectorId");
					this.OnDirectorIdChanged();
				}
			}
		}
		
		[Column(Name="year", Storage="_Year", DbType="NVarChar(10)")]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Name="media_type_id", Storage="_MediaTypeId", DbType="Int NOT NULL")]
		public int MediaTypeId
		{
			get
			{
				return this._MediaTypeId;
			}
			set
			{
				if ((this._MediaTypeId != value))
				{
					this.OnMediaTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeId = value;
					this.SendPropertyChanged("MediaTypeId");
					this.OnMediaTypeIdChanged();
				}
			}
		}
		
		[Column(Name="original_title", Storage="_OriginalTitle", DbType="NVarChar(500)")]
		public string OriginalTitle
		{
			get
			{
				return this._OriginalTitle;
			}
			set
			{
				if ((this._OriginalTitle != value))
				{
					this.OnOriginalTitleChanging(value);
					this.SendPropertyChanging();
					this._OriginalTitle = value;
					this.SendPropertyChanged("OriginalTitle");
					this.OnOriginalTitleChanged();
				}
			}
		}
		
		[Column(Name="language_id", Storage="_LanguageId", DbType="Int")]
		public System.Nullable<int> LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[Column(Name="cover", Storage="_CoverRaw", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] CoverRaw
		{
			get
			{
				return this._CoverRaw;
			}
			set
			{
				if ((this._CoverRaw != value))
				{
					this.OnCoverRawChanging(value);
					this.SendPropertyChanging();
					this._CoverRaw = value;
					this.SendPropertyChanged("CoverRaw");
					this.OnCoverRawChanged();
				}
			}
		}
		
		[Association(Name="Movie_Lend", Storage="_Lends", ThisKey="Id", OtherKey="MovieId")]
		public EntitySet<Lend> Lends
		{
			get
			{
				return this._Lends;
			}
			set
			{
				this._Lends.Assign(value);
			}
		}
		
		[Association(Name="Director_Movie", Storage="_Director", ThisKey="DirectorId", OtherKey="Id", IsForeignKey=true)]
		public Director Director
		{
			get
			{
				return this._Director.Entity;
			}
			set
			{
				Director previousValue = this._Director.Entity;
				if (((previousValue != value) 
							|| (this._Director.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Director.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Director.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._DirectorId = value.Id;
					}
					else
					{
						this._DirectorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Director");
				}
			}
		}
		
		[Association(Name="Language_Movie", Storage="_Language", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._LanguageId = value.Id;
					}
					else
					{
						this._LanguageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[Association(Name="MediaType_Movie", Storage="_MediaType", ThisKey="MediaTypeId", OtherKey="Id", IsForeignKey=true)]
		public MediaType MediaType
		{
			get
			{
				return this._MediaType.Entity;
			}
			set
			{
				MediaType previousValue = this._MediaType.Entity;
				if (((previousValue != value) 
							|| (this._MediaType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MediaType.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._MediaType.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._MediaTypeId = value.Id;
					}
					else
					{
						this._MediaTypeId = default(int);
					}
					this.SendPropertyChanged("MediaType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lends(Lend entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Lends(Lend entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[Table(Name="director")]
	public partial class Director : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _CountryId;
		
		private EntitySet<Movie> _Movies;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    #endregion
		
		public Director()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="country_id", Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Association(Name="Director_Movie", Storage="_Movies", ThisKey="Id", OtherKey="DirectorId")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		[Association(Name="Country_Director", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Directors.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Directors.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Director = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Director = null;
		}
	}
	
	[Table(Name="language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private EntitySet<Country> _Countries;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Language()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="code", Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Association(Name="Language_Country", Storage="_Countries", ThisKey="Id", OtherKey="LanguageId")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		[Association(Name="Language_Movie", Storage="_Movies", ThisKey="Id", OtherKey="LanguageId")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[Table(Name="lend")]
	public partial class Lend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MovieId;
		
		private string _LentTo;
		
		private System.DateTime _LentDate;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMovieIdChanging(int value);
    partial void OnMovieIdChanged();
    partial void OnLentToChanging(string value);
    partial void OnLentToChanged();
    partial void OnLentDateChanging(System.DateTime value);
    partial void OnLentDateChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    #endregion
		
		public Lend()
		{
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="movie_id", Storage="_MovieId", DbType="Int NOT NULL")]
		public int MovieId
		{
			get
			{
				return this._MovieId;
			}
			set
			{
				if ((this._MovieId != value))
				{
					this.OnMovieIdChanging(value);
					this.SendPropertyChanging();
					this._MovieId = value;
					this.SendPropertyChanged("MovieId");
					this.OnMovieIdChanged();
				}
			}
		}
		
		[Column(Name="lent_to", Storage="_LentTo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LentTo
		{
			get
			{
				return this._LentTo;
			}
			set
			{
				if ((this._LentTo != value))
				{
					this.OnLentToChanging(value);
					this.SendPropertyChanging();
					this._LentTo = value;
					this.SendPropertyChanged("LentTo");
					this.OnLentToChanged();
				}
			}
		}
		
		[Column(Name="lent_date", Storage="_LentDate", DbType="DateTime NOT NULL")]
		public System.DateTime LentDate
		{
			get
			{
				return this._LentDate;
			}
			set
			{
				if ((this._LentDate != value))
				{
					this.OnLentDateChanging(value);
					this.SendPropertyChanging();
					this._LentDate = value;
					this.SendPropertyChanged("LentDate");
					this.OnLentDateChanged();
				}
			}
		}
		
		[Column(Name="return_date", Storage="_ReturnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[Association(Name="Movie_Lend", Storage="_Movie", ThisKey="MovieId", OtherKey="Id", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Lends.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Lends.Add(this);
						this._MovieId = value.Id;
					}
					else
					{
						this._MovieId = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="media_type")]
	public partial class MediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MediaType()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="MediaType_Movie", Storage="_Movies", ThisKey="Id", OtherKey="MediaTypeId")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.MediaType = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.MediaType = null;
		}
	}
}
#pragma warning restore 1591
